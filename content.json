{"meta":{"title":"Hexo","subtitle":"","description":"","author":"小轩同学","url":"http://1530624156.github.io","root":"/"},"pages":[],"posts":[{"title":"3.交互JavaScript","slug":"3-交互JavaScript","date":"2021-08-05T06:12:15.000Z","updated":"2021-08-05T06:15:39.143Z","comments":true,"path":"2021/08/05/3-交互JavaScript/","link":"","permalink":"http://1530624156.github.io/2021/08/05/3-%E4%BA%A4%E4%BA%92JavaScript/","excerpt":"","text":"1.简介1.1. 什么是Javascript JavaScript 是一种具有面向对象能力的、解释型的程序设计语言。更具体一点，它是基于对象和事件驱动并具有相对安全性的客户端脚本语言。它的主要目的是，验证发往服务器端的数据、增加 Web互动、加强用户体验度等。 1.2. JavaScript发展史 大概在1992年,一家称作Nombas的公司开始开发一种叫做C– –(C-minus-minus,简称Cmm)的嵌入式脚本语言。保持与C（和C++）的相似性，以便开发人员能很快学会。Nombas最终把Cmm的名字改成了ScriptEase，而这种嵌入式脚本的理念也成为因特网的一块重要的基石。​ 1995年，Netscape(网景)公司的布兰登与Sun 公司联手开发一个称为 LiveScript 的脚本语言。为了营销便利，之后更名为 JavaScript(目的是在 Java 这课大树下好乘凉)。一个完整的JavaScript实现是由以下3个不同部分组成的。 ECMAScript定义的只是这门语言的基础，与Web浏览器没有依赖关系，而在基础语法上可以构建更完善的脚本语言。JavaScript的运行需要一定的环境，脱离了环境JavaScript代码是不能运行的，JavaScript只能够寄生在某个具体的环境中才能够工作。JavaScript运行环境一般都由宿主环境和执行期环境共同构成，其中宿主环境是由外壳程序生成的，如Web浏览器就是一个外壳程序，它提供了 一个可控制浏览器窗口的宿主环境。执行期环境则由嵌入到外壳程序中的JavaScript引擎（或称为JavaScript解释器）生成，在这个环境中 JavaScript能够生成内置静态对象，初始化执行环境等。 Web浏览器自定义的DOM组件，以面向对象方式描述的文档模型。DOM定义了表示和修改文档所需的对象、这些对象的行为和属性以及这些对象之间的关系。DOM对象，是我们用传统的方法(javascript)获得的对象。DOM属于浏览器，而不是JavaScript语言规范里的规定的核心内容。​ 前面的DOM是为了操作浏览器中的文档，而为了控制浏览器的行为和操作(BOM)，浏览器还提供了BOM（浏览器对象模型）。 简单的说就是下面这种结构 1.2.1. ECMAScript(基础语法)JavaScript的核心语法ECMAScript描述了该语言的语法和基本对象 1.2.2. BOM(浏览器对象模型)浏览器对象模型（BOM）—— 描述了与浏览器进行交互的方法和接口 1.2.3. DOM(文档对象模型)文档对象模型（DOM）—— 描述了处理网页内容的方法和接口 1.3. 开发工具浏览器: chrome或火狐Hbuilder或Eclipse等等进入“控制台”console：浏览器F12 1.3.0.1. 控制台的作用console对象代表浏览器的JavaScript控制台，用来运行JavaScript命令，常常用来显示网页运行时候的错误信息。Elements用来调试网页的html和css代码。 2.语法格式2.1. 注释 可以将注释插入 JS代码中，这样可以提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们。 12345COPY// 这里的内容就是注释/* 这里的内容就是注释 *//*也可以这样多行注释*/ 2.2. 行内式 行内式将JS定义在具体html元素中。以行内式写的JS耦合度高，这种写法会使得页面非常杂乱无章，真正开发中实际上是使用嵌入式或引入外部JS文件的方式。 12COPY&lt;!-- 行内式 实现点击事件，点击后加载一个警告框 --&gt;&lt;button onclick=&quot;alert(&#x27;you clicked hered!!!&#x27;)&quot;&gt;click here&lt;/button&gt; 2.3. 嵌入式 嵌入式通过在html页面内容开辟一段属于JS的代码区域，通常做法为在 &lt;body&gt; 标签中嵌套&lt;script&gt; 标签。 12345COPY&lt;!-- 页面加载后执行一个警告框 --&gt;&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;// 页面加载后执行一个警告框alert(&#x27;this is inner js code&#x27;);&lt;/script&gt; 2.4. 引入外部文件 在实际开发当中，很多时候都使用引入外部文件，这种形式可以使html页面更加清晰。​ hello.js 12COPY// 页面加载后执行一个警告框alert(&#x27;this is a outter js document&#x27;); index.html 12COPY&lt;!-- 引入外部js文件 --&gt;&lt;script src=&quot;js/hello.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; 注意：我们可以将JavaScript代码放在html文件中任何位置，但是我们一般放在网页的head或者body部分。由于页面的加载方式是从上往下依次加载的，而这个对我们放置的js代码运行是有影响的。 放在 &lt;head&gt; 部分，最常用的方式是在页面中head部分放置 &lt;script&gt; 元素，浏览器解析head部分就会执行这个代码，然后才解析页面的其余部分。​ 放在 &lt;body&gt; 部分，JavaScript代码在网页读取到该语句的时候就会执行。​ 在已经有了写好的js代码，直接使用是非常简单的，但是我们需要学习的是JS的写法，使用JS的基本语法，结合BOM和DOM两种接口来操作浏览器中的元素，使得我们的页面能够具有动态的效果。 3.JavaScript基础语法3.1. 语句 JavaScript程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。​ 语句（statement）是为了完成某种任务而进行的操作，语句以分号结尾，一个分号即表示一个语句结束。多个语句可以写在一行内（不建议这么写代码），但是一行写多条语句时，语句必须以分号结尾。​ 表达式不需要分号结尾。一旦在表达式后面添加分号，则JavaScript引擎就将表达式视为语句，这样会产生一些没有任何意义的语句。 1234COPY// 一条普通的语句 支持一行写多条语句 &#x27;;&#x27;分隔var num = 2 * 3; var str = &#x27;我是字符串&#x27;;alert(num);alert(str); 3.2. 关键字 关键字也称保留字，是被JavaScript征用来有特殊含义的单词 abstract arguments boolean break byte case catch char class const continue debugger default delete do double else enum eval export extends false final finally float for function goto if implements import in instanceof int interface let long native new null package private protected public return short static super switch synchronized this throw throws transient true try typeof var void volatile while with yield 3.3. 标识符 标识符就是一个名字，用来给变量和函数进行命名，有特定规则和规范​ 规则：由 Unicode字母 、 _ 、 $ 、数字 、 中文 组成 不能以数字开头 不能是关键字和保留字 严格区分大小写 规范： 见名知意 驼峰命名或下划线规则 1234567COPYvar a = 1;var abc = &quot;1&quot;;var _test = &quot;test&quot;;var $name = &quot;张三&quot;;var age1 = 18;var userPwd = &quot;a1b2c3&quot;;var USER_AGE = 20; 3.4. 变量 变量即一个带名字的用来存储数据的内存空间，数据可以存储到变量中，也可以从变量中取出数据。万能的盒子。 3.4.1. 变量的声明 JavaScript是一种弱类型语言，在声明变量时不需要指明数据类型，直接用var修饰符进行声明。​ 变量声明和赋值： 12345COPY// 先声明再赋值var a;a = 10;// 声明同时赋值var b = 20; 3.4.2. 变量的注意点 a. 若只声明而没有赋值，则该变量的值为undefined。 12COPYvar box;console.log(box); // 在浏览器F12的控制台打印 b. 变量要有定义才能使用，若变量未声明就使用，JavaScript会报错，告诉你变量未定义 123COPYvar max = 100;console.log(max);console.log(min); // 未声明就使用，报错变量未定义min is not defined c. 可以在同一条var命令中声明多个变量。 1234COPY// 声明了aa, bb没有赋值 声明了cc同时赋值10var aa, bb, cc = 10;var a = 10, b = 10, c= 10;console.log(aa, bb, cc); d. 若使用var重新声明一个已经存在的变量，是无效的。 123COPYvar box = 10var box;console.log(box); e. 若使用var重新声明一个已经存在的变量且赋值，则会覆盖掉前面的值 123COPYvar box = 10var box = 25console.log(box); f. JavaScript是一种动态类型、弱类型语言，也就是说，变量的类型没有限制，可以赋予各种类型的值。 12COPYvar box = &#x27;hello world&#x27;console.log(box); 3.5. 数据类型 虽说JS是弱类型语言，变量没有类型，但数据本身是有类型的。针对不同的类型，我们可以进行不同的操作。JavaScript 中有6 种数据类型，其中有五种简单的数据类型：undefined、Null、布尔、数值和字符串。一种复杂数据类型Object。 类型 描述 数 值（Number） 整数和小数（比如 1 和 3.14） 字符串（String） 字符组成的文本（比如”Hello World”） 布尔值（Boolean） true（真）和 false（假）两个特定值 undefined 表示“未定义”或不存在，即此处目前没有任何值 Null 表示空缺，即此处应该有一个值，但目前为空 对象（object）(引用) 各种值组成的集合 3.5.1. undefined undefined类型的值是undefined。​ undefined 是一个表示”无”的原始值，表示值不存在。​ 当声明了一个变量而没有初始化时，这个变量的值就是undefined 12COPYvar box;console.log(&#x27;box-----&#x27; + box); // undefined 3.5.2. null null类型是只有一个值的数据类型，即特殊的值null。​ undefined派生自null，所以等值比较返回值是true。​ 它表示空值，即该处的值现在为空，它表示一个空对象引用。 1COPYvar box = null;// 空值 3.5.3. boolean 布尔 布尔类型有两个值：true、false。常用来做判断和循环的条件。 1COPYvar flag = true; 3.5.4. 数值型 数值型包含两种数值：整型和浮点型。 12COPYvar num1 = 1;// 整型var num2 = 1.23;// 浮点型 3.5.5. 字符串 使用 &#39;&#39; 或 &quot;&quot; 引起来，如：&#39;sxt&#39; ， &quot;good&quot; 。​ 使用加号 + 可以进行字符串的拼接，如： console.log(&#39;hello&#39; + &#39; everybody&#39;); ，结果为 &#39;helloeverybody&#39; 。 123COPYvar str1 = &#x27;sxt&#x27;;var str2 = &quot;good&quot;;var str3 = &#x27;hello&#x27; + &#x27; everybody&#x27;; 3.5.6. 函数 函数是具有某个功能的代码块 123COPYfunction f() &#123;// 具有功能的代码块&#125; 3.6. 类型转换 很多时候，我们在进行数据运算或输出等操作时需要将数据在不同类型之间进行转换，这里我们主要掌握数值型和字符串。 3.6.1. 数值型(转换函数) JS提供了 parseInt() 和 parseFloat() 两个全局转换函数。前者把值转换成整数，后者把值转换成浮点数。只有对String类型调用这些方法，这两个函数才能正确运行；对其他类型返回的都是NaN(Not a Number) 。 3.6.1.1. parseInt()parseInt() 在转换之前，首先会分析该字符串，判断位置为0处的字符，判断它是否是个有效数字，如果不是，则直接返回NaN，不再继续，如果是则继续，直到找到非字符。 1234COPYconsole.log(parseInt(&quot;1234blue&quot;)); // return 1234console.log(parseInt(&quot;0xA&quot;)); // return 10console.log(parseInt(&quot;22.5&quot;)); // return 22console.log(parseInt(&quot;blue&quot;)); // return NaN 3.6.1.2. parseFloat() parseFloat() 方法与 parseInt() 方法的处理方式相似，从位置 0 开始查看每个字符，直到找到第一个非有效的字符为止，然后把该字符之前的字符串转换成数字。不过，对于这个方法来说，第一个出现的小数点是有效字符。如果有两个小数点，第二个小数点将被看作无效的，parseFloat()方法会把这个小数点之前的字符串转换成数字。 12345COPYconsole.log(parseFloat(&quot;1234blue&quot;)); //return 1234console.log(parseFloat(&quot;22.5&quot;)); //return 22.5console.log(parseFloat(&quot;22.34.5&quot;)); //return 22.34console.log(parseFloat(&quot;0908&quot;)); //return 908console.log(parseFloat(&quot;blue&quot;)); //return NaN 3.6.2. 字符串 几乎每个数对象都提供了toString()函数将内容转换为字符串形式。最为简单的转换为字符串的方式，直接在任意数据后面 + &#39;&#39; 或 &quot;&quot; 即可。 12345678910111213141516COPYvar data = 10;console.log(data.toString());// &quot;10&quot;data = true;console.log(data.toString());// &quot;true&quot;// toString()不能对null和undefined使用data = null;// 会报错Uncaught TypeError: Cannot read property &#x27;toString&#x27; of null// console.log(data.toString());data = undefined;// 会报错Uncaught TypeError: Cannot read property &#x27;toString&#x27; of null// console.log(data.toString());// 拼接字符串可以对null和undefined使用data = null + &#x27;&#x27;;console.log(data.toString());data = undefined + &quot;&quot;;console.log(data.toString()); 3.7. 运算符 运算符用于执行程序代码运算，会针对一个及其以上操作数来进行运算。 3.7.1. 算数运算符 运算符 描述 例子y = 5 结果 + 加 x = y + 2 x = 7 - 减 x = y - 2 x = 3 * 乘 x = y * 2 x = 10 / 除 x = y / 2 x = 2.5 % 求余数 x = y % 2 x = 1 ++ 自增 x = ++y x = 6 – 自减 x = –y x = 4 3.7.2. 赋值和扩展运算符 运算符 例子x = 10, y = 5 等价于 结果 = x = y x = 5 += x += y x = x + y x = 15 -= x -= y x = x - y x = 5 *= x *= y x = x * y x = 50 /= x /= y x = x / y x = 2 %= x %= y x = x % y x = 0 3.7.3. 比较运算符 运算符 描述 例子x = 5 == 等于 x == 8 为 false === 全等（值和类型） x===5 为 true；x===&quot;5&quot; 为 false != 不等于 x != 8 为 true &gt; 大于 x &gt; 8 为 false &lt; 小于 x &lt; 8 为 true &gt;= 大于或等于 x &gt;= 8 为 false &lt;= 小于或等于 x &lt;= 8 为 true 3.7.4. 逻辑运算符 运算符 描述 例子x = 5, y = 2 &amp;&amp; and (x &lt; 10 &amp;&amp; y &gt; 1) 为 true || or (x == 5 || y == 5) 为 true ! not !(x == y) 为 true 3.7.5. 三目运算符 运算符 描述 例子 ? : 如果…否则… 3 &gt; 5 ? 3 : 5 12345COPYvar a = 3;var b = 5;// 3大于5吗(返回true|false) ? 大于(true)返回a : 小于(false)返回bvar result = a &gt; b ? a : b;console.log(result); 3.8. 控制语句 我们写的JavaScript代码都是按照从上到下依次执行，很多时候我们希望代码按照我们的意愿去执行，比如有选择性地执行某些代码，或者重复地执行某些代码，这就需要使用到流程控制语句。​ 流程控制语句一共有三种： a.流程执行: 从上到下，从左到右b.选择执行: 分支选择c.循环执行: 重复执行 3.8.1. 选择执行3.8.1.1. 单选择123COPYif (条件表达式) &#123;语句体;&#125; 首先执行条件，如果结果为true，则执行语句体；如果结果为false，则结束if语句。注意：若语句体只有一条语句，可以省略大括号，但不建议省略 3.8.1.2. 双选择12345COPYif (条件表达式) &#123;语句体1;&#125; else &#123;语句体2;&#125; 首先执行条件，如果结果为true，则执行语句体1；如果结果为false，则执行语句体2。 3.8.1.3. 多选择1234567891011COPYif (条件表达式1) &#123;语句体1;&#125; else if (条件表达式2) &#123;语句体2;&#125; else if (条件表达式3) &#123;语句体3；&#125;...[else &#123;语句体n+1;&#125;] 3.8.2. 循环执行 循环结构用于重复执行某个操作，简单理解就是重复执行同类型的代码，它有多种形式，这里我们主要掌握for循环。 123456COPYfor (初始化语句; 判断条件语句; 控制条件语句) &#123;循环体语句;&#125;for (var i = 0; i &lt; 10; i++) &#123;console.log(i);&#125; 3.8.2.1. break与continue break: 停止本层循环 continue: 暂停本次循环，继续下一次 3.9. 数组 数组（array）是按次序排列的一组数据，每个值的位置都有编号（从 0 开始），整个数组用方括号表示。Js中定义数组的三种方式如下（也可先声明再赋值）： 1234COPYvar arr = []; // 创建一个空数组var arr = [值1, 值2, 值3]; // 创建一个数组并赋值var arr = new Array(值1, 值2, 值3); // 直接实例化var arr = new Array(size); // 创建数组并指定长度 3.9.1. 创建123456789COPY// 数组的创建var arr1 = [];console.log(arr1.length); // 长度为0var arr2 = [1, &#x27;2&#x27;, 3.3, true, null];console.log(arr2.length); // 长度为5var arr3 = new Array(1, &#x27;2&#x27;, 3.3);console.log(arr3.length); // 长度为3var arr4 = new Array(3);console.log(arr4.length); // 长度为3 3.9.2. 基本操作 数组的长度可以通过 length 属性来获取，并可以任意更改 获取： 数组名.length 更改： 数组名.length = 新长度 数组中的每一个元素都可以被访问和修改，甚至是不存在的元素，无所谓越界 获取： 数组名[下标] 更改：数组名[下标] = 新值 12345678910COPYvar arr2 = [1, &#x27;2&#x27;, 3.3, true, null];console.log(arr2.length); // 长度为5var arr4 = new Array(3);// console.log(arr4.length); // 长度为3// 修改长度后，原来已有的数据会被丢失，返回undefinedarr2.length = 3console.log(arr2.length);console.log(arr2[3]);// 获取一个不存在的位置，不会报错越界，会返回undefinedconsole.log(arr4[5]); 3.9.3. 数组的遍历 数组的遍历即依次访问数组的每一个元素 ，可以用for循环进行遍历。 1234567COPYfor (var i = 0; i &lt; 数组.length; i++) &#123;数组名[i]是获取元素&#125;;var arr = [1, &#x27;2&#x27;, 3.3, true, null];for (var i = 0; i &lt; arr.length; i++) &#123;console.log(arr[i]);&#125; 3.10. 函数 函数，即方法。就是一段预先设置的功能代码块，可以反复调用，根据输入参数的不同，返回不同的值。函数也是对象。 3.10.1. 函数的定义 我们可以通过函数声明语句和函数定义表达式来初始化一个函数。 3.10.1.1. 函数声明语句12345678COPYfunction 函数名([参数列表])&#123;&#125;// 声明函数function foo1() &#123;console.log(&#x27;foo1&#x27;);&#125;// 调用函数foo1(); 3.10.1.2. 函数定义表达式 以表达式方式定义的函数，函数的名称是可以不需要的 123456789COPYvar 变量名 = function ([参数列表]) &#123;&#125;变量名();// 声明函数var foo2 = function () &#123;console.log(&#x27;foo2&#x27;);&#125;// 调用函数foo2(); 这种写法是将一个匿名函数赋值给变量。 3.10.2. 函数的参数 函数运行的时候，有时需要提供外部数据，不同的外部数据会得到不同的结果，这种外部数据就叫参数，定义时的参数称为形参，调用时的参数称为实参。 a. 实参可以省略，那么对应形参为undefinedb. 若函数形参同名（一般不会这么干），在使用时以最后一个值为准。c. 可以给参数默认值：当参数为特殊值时，可以赋予默认值。d. 参数为值传递，传递副本；引用传递时传递地址，操作的是同一个对象。 123456789101112131415161718192021COPY// 调用函数时，实参可以省略，则对应形参为undefinedfunction func1(a, b) &#123;console.log(a + &quot;+&quot; + b + &quot;=&quot; + (a + b));&#125;func1(3, 4, 5); // 3+4=7func1(1); // 1+undefined=NaNfunc1(); // undefined+undefined=NaN// 给参数默认值function func2(a=1, b=2) &#123;return a + b;&#125;console.log(&#x27;参数默认值-----&#x27; + func2());// 3console.log(&#x27;参数默认值-----&#x27; + func2(5, 7));// 12// 参数为值传递，传递副本；引用传递时传递地址，操作的是同一个对象。function func3(obj) &#123;obj[6] = &quot;我是第六个值&quot;; // 在函数内操作了数组，因为是同一个对象的原因，外部也可以获取到&#125;var arr = [1, &quot;2&quot;, 3.14, true, null];// 调用函数func3(arr);console.log(arr[6]); // 函数内操作的数据，因为是同一个对象的原因，外部也可以获取到 3.10.3. 函数的调用 常用调用方式： 函数名([实参]);​ 存在返回值可以变量接收，若接收无返回值函数则为undefined。 12345COPYfunction add(a, b) &#123;return a + b;&#125;var sum = add(1, 2)console.log(sum) 3.10.4. return语句 函数的执行可能会有返回值，需要使用return语句将结果返回。return语句不是必需的，如果没有的话，该函数就不返回任何值，或者说返回undefined。​ 作用：​ 在没有返回值的方法中，用来结束方法。​ 有返回值的方法中，一个是用来结束方法，一个是将值带给调用者。 3.10.5. 函数的作用域 函数作用域：全局(global variable)和局部(local variable) 123456789101112COPYvar a = 1; // 全局变量function func() &#123;var b = 2; // 局部变量console.log(&quot;全局变量a--&gt;&quot; + a);console.log(&quot;局部变量b--&gt;&quot; + b);&#125;func();console.log(&quot;---------------------------&quot;);// a可以访问console.log(&quot;全局变量a--&gt;&quot; + a);// b不能访问console.log(&quot;b--&gt;&quot; + b); 4. JavaScript内置对象4.1. String charAt(idx)：返回指定位置处的字符。​ indexOf(Chr)：返回指定子字符串的位置，从左到右。找不到返回-1​ substr(m,n)：返回给定字符串中从m位置开始，取n个字符，如果参数n省略，则意味着取到字符串末尾。​ substring(m,n)：返回给定字符串中从m位置开始，到n位置结束，不包含n位，如果参数n省略，则意味着取到字符串末尾。​ toLowerCase()：将字符串中的字符全部转化成小写。​ toUpperCase()：将字符串中的字符全部转化成大写。​ replace(s1, s2)：替换，将s1替换为s2。​ length: 属性，不是方法，返回字符串的长度。 123456789101112131415161718192021222324COPY// charAt(idx)：返回指定位置处的字符var msg = &#x27;IT is very good!&#x27;;var result = msg.charAt(1); // Tconsole.log(result, result.length);// indexOf(Chr)：返回指定子字符串的位置，从左到右。找不到返回-1var result = msg.indexOf(&quot;very&quot;);// 6console.log(result);// substr(m, n)：返回给定字符串中从m位置开始，取n个字符，如果参数n省略，则意味着取到字符串末尾。result = msg.substr(1, 8); // T is verconsole.log(result, result.length);// substring(m,n)：返回给定字符串中从m位置开始，到n位置结束，不包含n位，如果参数n省略，则意味着取到字符串末尾。result = msg.substring(1, 8); // T is veconsole.log(result, result.length);// toLowerCase()：将字符串中的字符全部转化成小写。result = msg.toLowerCase(); // it is very good!console.log(result, result.length);// toUpperCase()：将字符串中的字符全部转化成大写。result = msg.toUpperCase(); // IT IS VERY GOOD!console.log(result, result.length);// replace(s1, s2)：将s1字符串替换为s2字符串result = msg.replace(&#x27;IT&#x27;, &#x27;it&#x27;);console.log(result, result.length); 4.2. Math Math.random()：生成随机数​ Math.ceil()：向上取整​ Math.floor()：向下取整​ Math.round()：四舍五入取整 12345678COPYvar num = Math.random(); // 生成大于0小于1的浮点数console.log(num);num = Math.ceil(3.11223); // 向上取整 4console.log(num);num = Math.floor(3.55667); // 向下取整 3console.log(num);num = Math.round(3.11223); // 四舍五入 3console.log(num); 4.3. Date123456COPY// 获取日期时间getFullYear()年, getMonth()月, getDate()日, getDay()周,getHours()时,getMinutes()分,getSeconds()秒// 设置日期时间setFullYear(), setMonth(), ...toLoacaleString() 说明：​ a. getMonth() ：得到的值： 0~11 （1月12月）​ b. setMonth() ：设置值时` 011 &lt;/span&gt; ​ c. &lt;span style=&quot;color: #FD6E05;&quot;&gt;toLocaleString() `：可根据本地时间把 Date 对象转换为字符串，并返回结果。 12345678910111213141516171819202122232425262728COPY// 获取日期时间var current_date = new Date(); // 创建一个日期对象console.log(current_date);current_date_time = current_date.getFullYear(); // 年console.log(current_date_time);current_date_time = current_date.getMonth() + 1; // 月，返回的是0~11console.log(current_date_time);current_date_time = current_date.getDay(); // 周console.log(current_date_time);current_date_time = current_date.getDate(); // 日console.log(current_date_time);current_date_time = current_date.getHours(); // 时console.log(current_date_time);current_date_time = current_date.getMinutes(); // 分console.log(current_date_time);current_date_time = current_date.getSeconds(); // 秒console.log(current_date_time);// 返回一个本地时间的字符串currrent_date_time = current_date.toLocaleString();console.log(currrent_date_time);// 设置日期时间current_date.setFullYear(2008);current_date.setMonth(7);current_date.setDate(8);current_date.setHours(20);current_date.setMinutes(8);current_date.setSeconds(8);console.log(current_date.toLocaleString()); 5. JavaScript操作BOM对象 ECMAScript是JavaScript的核心，但如果要在Web中使用JavaScript，那么BOM（浏览器对象模型）则无疑才是真正的核心。BOM提供了很多对象，用于访问浏览器的功能，这些功能与任何的网页内容无关。多年来，缺少事实上的规范导致BOM既有意思又有问题，因为浏览器厂商会按照各自的想法随意去扩展它。于是，浏览器之间共有的对象就成为了事实上的标准。这些对象在浏览器中得以存在，很大程度上是由于他们提供了与浏览器的互操作型。W3C为了把浏览器中JavaScript最基本的部分标准化，已经将BOM的主要方面纳入了HTML5的规范当中。 5.1. window对象 BOM的核心对象是window，它表示浏览器的一个实例。window对象有双重角色，它既是通过JavaScript访问浏览器窗口的一个接口，又是ECMAScript规定的Global对象。这意味着在网页中定义的任何一个对象、变量和函数，都以window作为其Global对象，因此有权访问parseInt()等方法。如果页面中包含框架，则每个框架都拥有自己的window对象，并且保存在frames集合中。在frames集合中，可以通过数值索引（从0开始，从左至右，从上到下）或者框架的名称来访问相应的window对象。 5.1.1. 系统对话框 浏览器通过（实际是window对象的方法）alert()、confirm()、prompt()方法可以调用系统对话框向用户显示消息。​ a. 消息框:alert， 常用。​ alert() 方法用于显示带有一条指定消息和一个 OK 按钮的警告框。​ b. 输入框:prompt，返回提示框中的值。​ prompt() 方法用于显示可提示用户进行输入的对话框。​ 参数（可选）：​ 第一个参数：要在对话框中显示的纯文本。​ 第二个参数：默认的输入文本。​ c. 确认框:confirm，返回 true/false.​ confirm() 方法用于显示一个带有指定消息和 OK 及取消按钮的对话框。 12345678910111213141516171819202122232425262728293031COPY&lt;div id=&quot;dv&quot;&gt;this is a div&lt;/div&gt;&lt;button onclick=&quot;test_alert();&quot;&gt;消息框&lt;/button&gt;&lt;button onclick=&quot;test_prompt();&quot;&gt;输入框&lt;/button&gt;&lt;button onclick=&quot;test_comfirm();&quot;&gt;确认框&lt;/button&gt;&lt;script type=&quot;text/javascript&quot;&gt;// 消息框function test_alert() &#123;alert(&#x27;消息框！&#x27;);&#125;// 输入框function test_prompt() &#123;var item = prompt(&#x27;请输入年龄&#x27;); // item得到输入的值alert(item);alert(prompt(&#x27;请输入年龄&#x27;, 18)); // 将输入的值输出&#125;/*确认框返回值：boolean（true|false）*/function test_comfirm() &#123;var result = confirm(&#x27;真的要改吗？&#x27;);if (result) &#123;// DOM操作var ele = document.getElementById(&quot;dv&quot;);ele.style.color = &quot;red&quot;;ele.innerHTML = &quot;&lt;span&gt;div is red&lt;/span&gt;&quot;;&#125; else &#123;alert(&quot;没事别瞎点&quot;);&#125;&#125;&lt;/script&gt; 5.1.2. 打开窗口 window.open() 方法既可以导航到一个特定的URL也可以用来打开一个新的窗口 12345678COPY&lt;input type=&quot;button&quot; onclick=&#x27;openBaidu();&#x27; /&gt;&lt;script type=&quot;text/javascript&quot;&gt;function openBaidu() &#123;window.open(&#x27;http://www.baidu.com&#x27;, &#x27;_blank&#x27;);// 新窗口打开百度window.open(&quot;http://www.baidu.com&quot;, &quot;_self&quot;);// 当前窗口打开百度// window.open(); // 空白窗口&#125;&lt;/script&gt; 5.1.3. 时间函数 setTimeout() ：在指定的毫秒数后调用函数或计算表达式，只执行一次。​ setInterval() ：在指定的毫秒数后不停的调用函数或计算表达式，多次执行。​ 通过返回的标识也可以 clearTimeout() ， clearInterval() 来清除指定函数的执行。 1234567891011121314151617181920212223242526272829303132333435363738COPY &lt;h1 id=&quot;h1&quot;&gt;&lt;/h1&gt; &lt;input type=&quot;button&quot; value=&quot;停止显示时间&quot; onclick=&#x27;stopShow();&#x27; /&gt;&lt;script type=&quot;text/javascript&quot;&gt;// 延迟3 秒后出现 alert/*function hello() &#123;alert(&quot;对不起, 久等了！&quot;);&#125;window.setTimeout(&quot;hello()&quot;, 3000);*/// 不停的打印当前时间，当时间秒数为0时显示为红色function showTime() &#123;// 拿到当前时间var date = new Date();var time = date.toLocaleString();// 拿到相应对象var h1 = document.getElementById(&#x27;h1&#x27;);h1.innerHTML = time;console.log(date.getSeconds());var sec = date.getSeconds();sec = sec % 10; // 对10取余// 根据需求添加样式if(0 == sec) &#123; // 当时间的秒数变成0时，显示红色字体h1.innerHTML = &#x27;&lt;span style=&quot;color:red&quot;&gt;&#x27; + time + &#x27;&lt;/span&gt;&#x27;;&#125;&#125;/** 定时操作* 第一个参数：执行的方法；* 第二个参数：定时，单位是毫秒*/// 接收setInterval()返回的标识值var timeout = window.setInterval(showTime, 1000);// 停止操作function stopShow() &#123;window.clearInterval(timeout); // 返回的标识值用来停止函数&#125;&lt;/script&gt; 5.2. location对象 location对象是window对象之一，提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能。也​ 可通过 window.location 属性来访问。​ location 对象的属性 href ：设置或返回完整的 URL；​ location 对象的方法 reload() ：重新加载当前文档。 12345678COPY&lt;input type=&quot;button&quot; value=&quot;刷新&quot; onclick=&quot;window.location.reload();&quot; /&gt;&lt;input type=&quot;button&quot; value=&quot;百度&quot; onclick=&quot;openBaidu();&quot; /&gt;&lt;script type=&quot;text/javascript&quot;&gt;function openBaidu() &#123;// 用新的文档替换当前文档window.location.href = &quot;http://www.baidu.com&quot;;&#125;&lt;/script&gt; 5.3. document对象 每个载入浏览器的 HTML 文档都会成为 Document 对象。Document 对象使我们可以从脚本中对HTML 页面中的所有元素进行访问。Document 对象是 Window 对象的一部分，也可通过window.document 属性对其进行访问。​ document对象的body属性，提供对 元素的直接访问，在Document对象中我们会详细的讲解。该对象作为DOM中的核心对象存在。 6. 案例练习6.1. 九九乘法表 利用控制语句实现九九乘法表的打印。 1234567891011121314151617181920212223242526272829303132333435363738394041424344COPY&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;九九乘法表&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!--逻辑推导过程&lt;table&gt;&lt;tr&gt;&lt;td style=&quot;border: 1px solid black;&quot;&gt;1 * 1 = 1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;border: 1px solid black;&quot;&gt;1 * 2 = 2&lt;/td&gt;&lt;td style=&quot;border: 1px solid black;&quot;&gt;2 * 2 = 4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;border: 1px solid black;&quot;&gt;1 * 3 = 2&lt;/td&gt;&lt;td style=&quot;border: 1px solid black;&quot;&gt;2 * 3 = 6&lt;/td&gt;&lt;td style=&quot;border: 1px solid black;&quot;&gt;3 * 3 = 9&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;--&gt; &lt;script type=&quot;text/javascript&quot;&gt; // 使用DOM对象创建一个table，并写入body document.write(&quot;&lt;table&gt;&quot;); // 外圈控制行数 for (var i = 1; i &lt;= 9; i++) &#123; // 使用DOM对象创建一个tr，并写入到body的table中 document.write(&quot;&lt;tr&gt;&quot;); // 内圈控制个数 for (var j = 1; j &lt;= i; j++) &#123; // 使用DOM对象创建一个td，并写入到body中的table中的tr中 //console.log(i + &quot; * &quot; + j + &quot; = &quot; + i*j); document.write(&quot;&lt;td style=&#x27;border: 1px solid black;&#x27;&gt;&quot; + j + &quot; * &quot; + i + &quot; = &quot; + i * j + &quot;&lt;/td&gt;&quot;); &#125; document.write(&quot;&lt;/tr&gt;&quot;); &#125; document.write(&quot;&lt;/table&gt;&quot;); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 演示效果： 6.2. 程序员求签 利用HTML+CSS+JS开发具有动态效果的程序员求签工具。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758COPY&lt;!-- 必须写在HTML文件首行 --&gt;&lt;!DOCTYPE html&gt;&lt;!-- HTML文档的开始 --&gt;&lt;html&gt; &lt;!-- HTML文档的开头部分 --&gt; &lt;head&gt; &lt;!-- 文档属性 告诉浏览器采用什么编码解析文档 --&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;!-- 文档标题 --&gt; &lt;title&gt;程序员求签&lt;/title&gt; &lt;!-- 引入外部css文件 --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css/good_luck.css&quot; /&gt; &lt;!-- HTML文档的开头结束 --&gt; &lt;/head&gt; &lt;!-- HTML文档的主体部分开始 --&gt; &lt;body&gt; &lt;!-- 内容 --&gt; &lt;div id=&quot;container&quot;&gt; &lt;!-- 标题 --&gt; &lt;div id=&quot;title&quot;&gt; 程序员求签&lt;sup&gt;beta&lt;/sup&gt;&lt;!-- sup上标字 --&gt; &lt;/div&gt; &lt;!-- 详细信息 --&gt; &lt;div id=&quot;info&quot;&gt; &lt;b&gt;求&lt;/b&gt;婚丧嫁娶亲友疾病编程测试升职跳槽陨石核弹各类吉凶 &lt;/div&gt; &lt;!-- 日期时间 --&gt; &lt;div id=&quot;date&quot;&gt;&lt;/div&gt; &lt;!-- 求签部分 --&gt; &lt;div id=&quot;good_luck&quot;&gt; &lt;ul&gt; &lt;li&gt;编码测试修复提交之前求一签，可避凶趋吉&lt;/li&gt; &lt;li&gt;选择所求之事并在心中默念，再单击“求”即可&lt;/li&gt; &lt;li&gt;同一件事只能求一次，下次再求请刷新页面&lt;/li&gt; &lt;/ul&gt; &lt;table id=&quot;table&quot;&gt; &lt;tr&gt; &lt;td&gt;编码&lt;/td&gt; &lt;td&gt;测试&lt;/td&gt; &lt;td&gt;修复BUG&lt;/td&gt; &lt;td&gt;提交代码&lt;/td&gt; &lt;td&gt;其他&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;!-- 求签结果 --&gt; &lt;div id=&quot;result&quot;&gt; &lt;div id=&quot;check&quot;&gt;请点击所求之事&lt;/div&gt; &lt;div id=&quot;ask&quot;&gt;求&lt;/div&gt; &lt;div id=&quot;answer&quot;&gt;超大吉&lt;/div&gt; &lt;/div&gt; &lt;!-- 引入外部js文件 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/good_luck.js&quot;&gt;&lt;/script&gt; &lt;/div&gt; &lt;!-- HTML文档的主体部分结束 --&gt; &lt;/body&gt; &lt;!-- HTML文档的结束 --&gt;&lt;/html&gt; good_luck.css 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207COPY/* 采用什么编码解析文件 */@charset &quot;utf-8&quot;;/** 使用id选择器渲染id=&quot;container&quot;标签的样式*/#container &#123; width: 350px; /* 宽350px */ margin: 50px auto; /* 顶部外间距50px 居中 */&#125;/* -------------------------标题 begin------------------------- *//** 使用id选择器渲染id=&quot;title&quot;标签的样式*/#title &#123; background: gray; /* 背景色灰色 */ color: white; /* 字体白色 */ font-weight: bold; /* 字体加粗 */ font-size: 20px; /* 字体大小 */ padding: 10px 20px; /* 设置内间距 */ margin-bottom: 10px; /* 设置底部外间距10px */&#125;/* -------------------------标题 end--------------------------- *//* -------------------------详细信息 begin---------------------- *//** 使用id选择器渲染id=&quot;info&quot;标签的样式*/#info &#123; font-size: 12px; /* 字体大小 */ text-align: center; /* 文本居中 */ color: red; /* 字体红色 */&#125;/** 使用id选择器定位id=&quot;info&quot;标签* 然后渲染其子标签b的样式*/#info b &#123; background: crimson; /* 背景色深红色 */ color: white; /* 字体白色 */ padding: 0 3px; /* 设置内间距 */ margin: 0 3px; /* 设置外间距 */&#125;/* -------------------------详细信息 end------------------------ *//* -------------------------日期时间 begin---------------------- *//** 使用id选择器渲染id=&quot;date&quot;标签的样式*/#date &#123; font-size: 22px; /* 字体大小 */ font-weight: bold; /* 字体加粗 */ line-height: 40px; /* 行间距 */ text-align: center; /* 居中 */ border-bottom: 1px solid gray; /* 底部边框颜色灰色 粗细1px */&#125;/* -------------------------日期时间 end------------------------ *//* -------------------------求签部分 begin---------------------- *//** 使用id选择器渲染id=&quot;good_luck&quot;标签的样式*/#good_luck &#123; font-size: 14px; /* 字体大小 */&#125;/** 使用id选择器定位id=&quot;table&quot;标签* 然后渲染其子标签tr的子标签td的标签样式*/#table tr td &#123; width: 100px; /* 宽100px */ background: #CCCCCC; /* 背景色 */ padding: 10px 0; /* 设置顶部和底部内间距10px 左右为0 */ text-align: center; /* 居中 */ cursor: pointer; /* 鼠标变手势 */ border-radius: 2px; /* 边角变圆角 */&#125;/* 添加鼠标移动至指定元素的样式修改 */#table tr td:hover &#123; background: #AAAAAA; /* 背景色 */&#125;/* -------------------------求签部分 end------------------------ *//* -------------------------求签结果 begin---------------------- *//** 使用id选择器渲染id=&quot;result&quot;标签的样式*/#result &#123; height: 200px; /* 高度200px */ border: 2px solid #FFAAAA; /* 边框颜色 粗细2px */ margin-top: 10px; /* 设置外间距 */ position: relative; /* 子标签相对于父标签定位 */ overflow: hidden; /* 超出标签范围内容隐藏 */&#125;/** 使用id选择器渲染id=&quot;check&quot;标签的样式*/#check &#123; text-align: center; /* 居中 */ font-size: 30px; /* 字体大小 */ padding-top: 70px; /* 设置顶部内间距70px */&#125;/** 使用id选择器渲染id=&quot;ask&quot;标签的样式*/#ask &#123; background: crimson; /* 背景色深红色 */ position: absolute; /* 相对于父标签使用绝对定位 */ top: 205px; /* 从父标签顶部开始计算 */ left: 0px; /* 从父标签左部开始计算 */ width: 100%; /* 宽度是其父元素的100% */ height: 100%; /* 高度是其父元素的100% */ font-size: 100px; /* 字体大小 */ font-weight: bold; /* 字体加粗 */ cursor: pointer; /* 鼠标变手势 */ text-align: center; /* 居中 */ line-height: 200px; /* 行间距 */ color: white; /* 字体白色 */ transition: all 0.5s; /* 所有样式改变效果耗时0.5秒 */&#125;/** 使用id选择器渲染id=&quot;answer&quot;标签的样式*/#answer &#123; background: white; /* 背景色白色 */ position: absolute; /* 相对于父标签使用绝对定位 */ top: 205px; /* 从父标签顶部开始计算 */ left: 0px; /* 从父标签左部开始计算 */ width: 100%; /* 宽度是其父元素的100% */ height: 100%; /* 高度是其父元素的100% */ font-size: 100px; /* 字体大小 */ font-weight: bold; /* 字体加粗 */ cursor: pointer; /* 鼠标变手势 */ text-align: center; /* 居中 */ line-height: 200px; /* 行间距 */ transition: all 0.5s; /* 所有样式改变效果耗时0.5秒 */&#125;/* -------------------------求签结果 end------------------------ */ good_luck.js 12345678910111213141516171819202122232425262728293031323334353637383940COPY/* * 页面加载以后就执行的函数 */window.onload = function() &#123; // 创建日期对象 var today = new Date(); // 创建数组并初始化数组 var weeks = [&quot;日 &quot;, &quot;一 &quot;, &quot;二 &quot;, &quot;三 &quot;, &quot;四 &quot;, &quot;五 &quot;, &quot;六 &quot;]; // 拼接字符串得到一个中文日期，并设置为id=&quot;date&quot;的div标签的内容 document.getElementById(&#x27;date&#x27;).innerHTML = &quot;今天是 &quot; + today.getFullYear() + &quot;年 &quot; + (today.getMonth() + 1) + &quot;月 &quot; + today.getDate() + &quot;日 星期&quot; + weeks[today.getDay()]; // 根据标签名称获取所有td标签 var tds = document.getElementsByTagName(&#x27;td&#x27;); // 循环遍历td标签，给每一个td都添加一个点击事件 for (var i = 0; i &lt; tds.length; i++) &#123; // 添加点击事件 tds[i].onclick = function() &#123; // 根据id获取id=&quot;asd&quot;的div标签，并设置其top属性为0px(标签样式0.5秒移动至0px) document.getElementById(&#x27;ask&#x27;).style.top = &#x27;0px&#x27;; // 根据id获取id=&quot;card&quot;的div标签，并设置其display属性为none(隐藏div) document.getElementById(&#x27;check&#x27;).style.display = &#x27;none&#x27;; // 根据id获取id=&quot;answer&quot;的div标签，并设置其top属性为205px(标签样式0.5秒移动至205px) document.getElementById(&#x27;answer&#x27;).style.top = &#x27;205px&#x27;; &#125;&#125;// 创建数组并初始化数组var results = [&#x27;超大吉&#x27;, &#x27;大吉&#x27;, &#x27;吉&#x27;, &#x27;小吉&#x27;, &#x27;小凶&#x27;, &#x27;凶&#x27;, &#x27;大凶&#x27;, &#x27;超大凶&#x27;];// 根据id获取id=&quot;asd&quot;的div标签，并添加点击事件document.getElementById(&#x27;ask&#x27;).onclick = function() &#123; // 生成一个0~7的随机数 var num = Math.floor(Math.random() * 8); // 根据随机数(下标)获取results数组内对应的求签结果，并设置为id=&quot;answer&quot;的div标签的内容 document.getElementById(&#x27;answer&#x27;).innerHTML = results[num]; // 根据id获取id=&quot;answer&quot;的div标签，并设置其top属性为0px(标签样式0.5秒移动至0px) document.getElementById(&#x27;answer&#x27;).style.top = &#x27;0px&#x27;; // 根据id获取id=&quot;asd&quot;的div标签，并设置其top属性为205px(标签样式0.5秒移动至205px) document.getElementById(&#x27;ask&#x27;).style.top = &#x27;205px&#x27;;&#125;&#125; 演示效果：","categories":[{"name":"前端","slug":"前端","permalink":"http://1530624156.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://1530624156.github.io/tags/JavaScript/"}]},{"title":"2.炫酷CSS","slug":"2-炫酷CSS","date":"2021-08-05T06:11:49.000Z","updated":"2021-08-05T06:13:11.771Z","comments":true,"path":"2021/08/05/2-炫酷CSS/","link":"","permalink":"http://1530624156.github.io/2021/08/05/2-%E7%82%AB%E9%85%B7CSS/","excerpt":"","text":"HTML与CSS的关系 CSS（Cascade Style Sheets）层叠样式表, 是一种用来表现HTML文件样式的计算机语言。 CSS 目前最新版本为 CSS3，是能够真正做到网页表现与内容分离的一种样式设计语言。相对于传统HTML 的表现而言，CSS 能够对网页中的对象的位置排版进行像素级的精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力，并能够进行初步交互设计，是目前基于文本展示最优秀的表现设计语言。CSS能够根据不同使用者的理解能力，简化或者优化写法，针对各类人群，有较强的易读性。 CSS是用来美化网页用的，没有网页则CSS毫无用处，所以CSS需要依赖HTML展示其功能。 CSS语法格式2.1. 注释 可以将注释插入 CSS代码中，这样可以提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们。 12345COPY/* 这里的内容就是注释 *//* 也可以这样多行注释*/ 2.2. 行内式 行内式将样式定义在具体html元素的style属性中。以行内式写的CSS耦合度高，只适用于当前元素，在设定某个元素的样式时比较常用。但是这种写法会使得页面非常杂乱无章，真正开发中实际上是使用嵌入式或引入外联样式文件的方式来进行渲染的。 12COPY&lt;!-- 设置指定的div的宽度和高度，背景色为黑色 --&gt;&lt;div style=&quot;width:200px;height:300px;background:black;&quot;&gt;&lt;/div&gt; 2.3. 嵌入式 嵌入式通过在html页面内容开辟一段属于css的代码区域，通常做法为在 &lt; head&gt; 标签中嵌套&lt;style&gt; 标签，在 &lt;style&gt; 中通过==选择器==的方式调用指定的元素并设置相关 CSS。 12345678910111213COPY选择器名称 &#123; 属性:属性值; ...&#125; &lt;style type=&quot;text/css&quot;&gt; /* 使用元素选择器给所有div设置宽度和高度，背景色为黑色 */ div &#123; width:200px; height:300px; background:black; &#125;&lt;/style&gt; 注意： css 声明要以分号 ; 结束，声明以 {} 括起来 建议一行书写一个属性 若值为若干单词，则要给值加引号，如font-family: &quot;agency fb&quot; ; 2.4. 引入外联样式文件 在实际开发当中，很多时候都使用引入外联样式文件，这种形式可以使html页面更加清晰，而且可以达到更好的重用效果。 style.css 123456COPY/* 使用元素选择器给所有div设置宽度和高度，背景色为黑色 */div &#123; width:200px; height:300px; background:black;&#125; index.html 1COPY&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot; /&gt; rel : 规定当前文档与被链接文档之间的关系。​ stylesheet : 文档的外部样式表。​ 很多时候，大量的 HTML 页面使用了同一个CSS。那么就可以将这些 CSS 样式保存在一个单独的 .css 文件中，然后通过 &lt;link /&gt; 元素去引入它。 CSS选择器 在 CSS 中，选择器是一种模式，用于选择需要添加样式的元素。​ CSS 选择器有很多，掌握常用的即可。 3.1. 基本选择器3.1.1. * 通用选择器12345COPY/* 初始所有元素的内外间距为0 */* &#123; margin: 0; padding: 0;&#125; 3.1.2. 元素选择器12345678910COPY选择器名称 &#123; 属性:属性值; ...&#125;/* 使用元素选择器给所有div设置宽度和高度，背景色为黑色 */div &#123; width:200px; height:300px; background:black;&#125; 3.1.3. . 类选择器12345678910COPY.class属性值 &#123; 属性:属性值; ...&#125;/* 使用类选择器给所有class=&quot;dv&quot;的元素设置宽度和高度，背景色为黑色 */.dv &#123; width:200px; height:300px; background:black;&#125; 3.1.4. # id选择器12345678910COPY#id属性值 &#123; 属性:属性值; ...&#125;/* 使用id选择器给id=&quot;dv&quot;的元素设置宽度和高度，背景色为黑色 */#dv &#123; width:200px; height:300px; background:black;&#125; 3.1.5. 分组选择器 当几个元素样式属性一样时，可以共同调用一个声明，元素之间用逗号分隔。 123456789101112COPY选择器1,选择器2, ...&#123; 属性:属性值; ...&#125;/* 使用元素选择器给所有p元素 使用id选择器给id=&quot;name&quot;的元素 设置字体颜色为红色，字体大小为20px*/p,#name &#123; color: red; font-size: 20px;&#125; 3.2. 2、组合选择器 CSS 组合选择器说明了两个选择器直接的关系。 CSS组合选择符包括各种简单选择符的组合方式。 3.2.1. 后代选择器（派生选择器） 用于选择指定标签元素下的后辈元素，以空格分隔。 123456789101112131415161718192021222324252627282930COPY父元素 子元素(可以继续获取子元素的子元素) &#123; 属性:属性值; ...&#125;/* 使用类选择器给所有class=&quot;food&quot;的元素 的所有子元素li设置蓝色的边框*/.food li &#123; border: 1px solid blue;&#125;/* 使用类选择器给所有class=&quot;food&quot;的元素 的所有子元素li 的所有子元素ul 的所有子元素li设置红色的边框*/.food li ul li &#123; border: 1px solid red;&#125;COPY&lt;h1&gt;食物&lt;/h1&gt;&lt;ul class=&quot;food&quot;&gt; &lt;li&gt;水果 &lt;ul&gt; &lt;li&gt;香蕉&lt;/li&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;梨&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;蔬菜 &lt;ul&gt; &lt;li&gt;白菜&lt;/li&gt; &lt;li&gt;油菜&lt;/li&gt; &lt;li&gt;卷心菜&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; CSS常用属性4.1. 背景 背景属性用于定义HTML元素的背景效果。 4.1.1. background-color 设置元素的背景颜色。 123456COPY/* 设置body元素的背景色为灰色 两种方式效果一致*/body &#123; background-color:gray; /* 另一种方式 */ background:gray;&#125; 4.1.2. background-image 设置元素的背景图像，默认情况下，背景图像进行平铺重复显示，以覆盖整个元素实体。 123456COPY/* 设置body元素的背景为图片 两种方式效果一致*/body &#123; background-image: url(img/Daniel_Wu.jpg); /* 另一种方式 */ background: url(img/Daniel_Wu.jpg);&#125; 4.1.3. background-repeat 设置是否重复图像及如何重复背景图像。 1234567COPY/* 设置body元素的背景为图片，图片不重复显示 两种方式效果一致*/body &#123; background-image: url(img/Daniel_Wu.jpg); background-repeat: no-repeat; /* 另一种方式 */ background: url(img/Daniel_Wu.jpg) no-repeat;&#125; background-repeat 可选的值。 值 描述 repeat 默认。背景图像将在垂直和水平方向重复 no-repeat 背景图像仅显示一次 repeat-x 背景图像水平方向重复 repeat-y 背景图像垂直方向重复 4.2. 文本4.2.1. color 设置文本的颜色。 1234567891011COPY/* 字体颜色蓝色 */body &#123; color:blue;&#125;/* 字体颜色绿色 */h1 &#123; color:#00ff00;&#125;/* 字体颜色红色 */h2 &#123; color:rgb(255,0,0);&#125; 4.2.2. text-align 设置文本对齐方式，center（居中），lex（左对齐），right（右对齐）。 123COPYbody &#123; text-align:center;&#125; 4.2.3. text-decoration 规定添加到文本的修饰，属性值：none、underline、overline、line-through。 underline：对文本添加下划线。 overline：对文本添加上划线。 line-through：对文本添加中划线。 none：关闭原本应用到元素上的所有横线样式。 123COPYh3 &#123; text-decoration:underline;&#125; 4.2.4. text-indent 设置文本首行缩进。 123COPYp &#123; text-indent: 2em;&#125; 4.3. 字体4.3.1. font-family 文本字体，该属性设置文本的字体。​ font-family 属性应该设置几个字体名称作为一种”后备”机制，如果浏览器不支持第一种字体，他将尝试下一种字体，所以尽量将不常见的字体靠前，将最常见的字体放置在最后，作为替补。注意： 只有当字体名中含有空格或符号或汉字时，才需要在font-family声明中加引号： 123COPYbody &#123; font-family: &quot;arial black&quot;;&#125; 多个字体系列是用一个逗号分隔指明 1234COPY/* 靠前的先生效 */p &#123; font-family: &quot;微软雅黑&quot;, &quot;黑体&quot;, &quot;agency fb&quot;;&#125; 4.3.2. font-size 文本大小 12345678COPY/* 字体大小50px */body &#123; font-size: 50px;&#125;/* 字体大小25px */#span1 &#123; font-size: 25px;&#125; 4.3.3. font-weight 字体加粗，该属性设置文本的粗细。100 ~ 900：为字体指定了 9 级加粗度。​ font-weight: blod; 可以将文本设置为粗体。​ 400 等价于 normal；​ 700 等价于 bold。 12345678910COPYbody &#123; font-weight: 100; font-weight: 900; /* 下面两种方式效果一致 */ font-weight: 700; font-weight: blod; /* 下面两种方式效果一致 */ font-weight: 400; font-weight: normal;&#125; 4.4. 列表4.4.1. list-style 设置列表样式， list-style 可选的值。 值 描述 none 无标记 disc 默认，标记是实心圆 circle 标记是空心圆 square 标记是实心方块 decimal 标记是数字 decimal-leading-zero 标记是0开头数字(01, 02, 03…) lower-roman 标记是小写罗马数字(ⅰ, ⅱ, ⅲ,…) upper-roman 标记大写罗马数字(Ⅰ, Ⅱ, Ⅲ,…) lower-alpha 标记是小写英文字母(a, b, c,…) upper-alpha 标记是大写英文字母(A, B, C,…) 1234COPY/* 列表样式无标记 */.food li ul li &#123; list-style: none;&#125; 4.5. 对齐方式4.5.1. text-align 规定元素中的文本的水平对齐方式。属性值如下。 值 描述 lex 默认值，文本排列到左边 right 文本排列到右边 center 文本排列到中间 justify 文本两端对齐 4.5.2. display display属性用于定义元素的显示类型。 属性值如下。 值 描述 none 此元素不会被显示 block 此元素将被显示为块级元素，此元素前后会带有换行符 inline 此元素被显示为内联元素，元素前后没有换行符 inline-block 行内块元素，li中使用会变为类似导航的效果 4.6. 盒子模型 border、padding、margin三个属性构成了盒子模型。 4.6.1. border 设置所有的边框属性。 1.可同时设置边框的宽度、样式、颜色 123456COPY/* 设置边框和宽高 */div&#123; border: 1px solid black;/* 设置粗细为1px的黑色实心线边框 */ width: 200px;/* 宽 */ height: 100px;/* 高 */&#125; 2.使用border-width、border-style、border-color单独设置 12345COPYdiv &#123; border-width: 1px;/* 粗细1px */ border-style: solid;/* 实心线 */ border-color: black;/* 黑色 */&#125; border-style 的属性 值 描述 none 无边框 dotted 点状边框 dashed 虚线边框 solid 实心线边框 double 双实线边框 4.6.2. padding 设置元素所有内边距的宽度，默认按照上右下左的顺序设定，或者设置各边上内边距的宽度。 1234COPY/* 设置上右下左的内边距 */div &#123; padding:10px 5px 15px 20px;&#125; 单独设置各边的内边距： padding-top 、 padding-left 、 padding-bottom 、 paddingrigh 。 1234567COPY/* 设置上右下左的内边距 */div &#123; padding-top: 10px; padding-left: 5px; padding-bottom: 15px; padding-right: 20px;&#125; 4.6.3. margin 设置一个元素所有外边距的宽度，或者设置各边上外边距的宽度。 1234COPY/* 设置上右下左的外边距 */div &#123; margin:10px 5px 15px 20px;&#125; 单独设置各边的外边距： margin-top 、 margin-left 、 margin-bottom 、 margin-right 。 1234567COPY/* 设置上右下左的外边距 */div &#123; margin-top: 10px; margin-left: 5px; margin-bottom: 15px; margin-right: 20px;&#125; auto 可以设置居中效果。 1COPYdiv &#123; margin: 0px auto;&#125; auto：自动，可以理解为居中的意思，浏览器自动计算外边距。 margin: 0px auto; 0 或者 0px 表示上下间距为0px，auto表示左右外边距自动计算，表现为居中状态。 测试 123456789101112131415161718192021222324252627282930313233COPY&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; .a_div &#123; width: 300px; height: 300px; border: 1px solid red; /* 设置上右下左的外边距 */ margin: 100px; &#125; .b_div &#123; width: 200px; height: 200px; background: yellow; /* 设置左外边距 */ margin-left: 20px; /* 设置上外边距 */ margin-top: 20px; /* 设置上右下左的内边距 */ padding: 20px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;a_div&quot;&gt; &lt;div class=&quot;b_div&quot;&gt;你好&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 5.CSS定位和浮动 CSS 定位 (positioning) 属性允许你对元素进行定位 ，定位的基本思想很简单，它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。​ CSS 有三种基本的定位机制：普通流、浮动和定位​ 除非专门指定，否则所有框都在普通流中定位，即普通流中的元素的位置由元素在HTML 中的位置决定浏览器在读取 HTML 源代码的时候是根据元素在代码出现的顺序读取，最终元素的呈现方式是依据元素的盒子模型来决定的。行内元素是从左到右，块状元素是从上到下。默认的书写方式即是普通流。 5.1. 定位position 通过使用 position 属性，我们可以选择 4 种不同类型的定位，这会影响元素框生成的方式。 值 描述 static 默认值，普通流 relative 相对定位，其子元素如果使用定位相对于它的位置改变 absolute 绝对定位，相对于其父元素的位置作为参照物 fixed 固定定位，相对于浏览器窗口作为参照物 static：默认值，普通流（忽略 left ， top ， right ， bottom 或者 z-index 声明）。​ relative：生成相对定位的元素，相对于其正常位置进行定位。元素的位置通过 left ， top ，right ， bottom 属性进行改变，其子元素如果使用定位相对于它的位置改变。​ absolute：生成绝对定位的元素，相对于其第一个父元素进行定位，如果父元素没有设置0relative 属性，则向上继续寻找，直到body元素。元素的位置通过 left ， top ， right ，bottom 属性进行规定。​ fixed：生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 left ， top ，right ， bottom 属性进行规定。 5.2. 浮动float float 的属性值有 none 、 left 、 right 。 值 描述 none 默认值，不浮动 lex 左浮动，元素从左边开始并列显示为一行 right 右浮动，元素从右边开始并列显示为一行 5.3. 测试123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687COPY&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS定位和浮动&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .a_div &#123; width: 200px; height: 200px; background: black; /* 相对定位，其子元素如果使用定位相对于它的位置改变 */ position: relative; margin: 0 auto; &#125; .b_div &#123; width: 50px; height: 50px; background: yellow; /*绝对定位，相对于其第一个父元素进行定位，如果父元素没有设置relative属性，则向上继续寻找，直到body元素*/ position: absolute; top: 0px; left: 0px; &#125; .c_div &#123; width: 50px; height: 50px; /* 相对浏览器绝对定位 */ position: fixed; bottom: 20px; right: 20px; background: blue; &#125; #div1 &#123; width: 100px; height: 100px; background: red; float: left; /* 左浮动 */ &#125; #div2 &#123; width: 100px; height: 100px; background: blueviolet; float: left; /* 左浮动 */ &#125; #div3 &#123; width: 100px; height: 100px; background: darkcyan; float: left; /* 左浮动 */ &#125; #div4 &#123; width: 100px; height: 100px; background: darksalmon; float: left; /* 左浮动 */ &#125; /* 鼠标移动至指定元素时修改样式 */ #div4:hover &#123; background: black; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;a_div&quot;&gt; &lt;div class=&quot;b_div&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;c_div&quot;&gt;&lt;/div&gt; &lt;div id=&quot;div1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;&lt;/div&gt; &lt;div id=&quot;div4&quot;&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 6.案例练习：百度注册 百度注册，利用HTML+CSS+DIV开发百度注册页面。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667COPY&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;注册百度账号&lt;/title&gt; &lt;!-- 引入外部css文件 --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css/baidu.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- --------------------头部 begin-------------------- --&gt; &lt;div id=&quot;head&quot;&gt; &lt;!-- 百度logo --&gt; &lt;div id=&quot;head_logo&quot;&gt; &lt;a href=&quot;http://www.baidu.com&quot;&gt; &lt;img src=&quot;img/baidu.gif&quot; /&gt; &lt;/a&gt; &lt;/div&gt; &lt;!-- 百度登录 --&gt; &lt;div id=&quot;head_login&quot;&gt; &lt;span&gt;我已注册，现在就&lt;/span&gt; &lt;input type=&quot;button&quot; value=&quot;登录&quot; /&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- --------------------头部 end---------------------- --&gt; &lt;!-- --------------------导航 begin-------------------- --&gt; &lt;div id=&quot;nav&quot;&gt; &lt;img src=&quot;img/reg_hr.png&quot; /&gt; &lt;/div&gt; &lt;!-- --------------------导航 end---------------------- --&gt; &lt;!-- --------------------注册 begin-------------------- --&gt; &lt;div id=&quot;register&quot;&gt; &lt;!-- 注册表单 --&gt; &lt;div id=&quot;reg_form&quot;&gt; &lt;form&gt; &lt;!-- 输入框 --&gt; &lt;p&gt;&lt;label&gt;用户名&lt;/label&gt;&lt;input placeholder=&quot;请设置用户名&quot; /&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt;手机号&lt;/label&gt;&lt;input placeholder=&quot;可用于登录和找回密码&quot; /&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt;密码&lt;/label&gt;&lt;input placeholder=&quot;请设置登录密码&quot; /&gt;&lt;/p&gt; &lt;p&gt; &lt;label&gt;验证码&lt;/label&gt;&lt;input placeholder=&quot;请输入验证码&quot; style=&quot;width: 190px;&quot; /&gt; &lt;!-- 短信按钮 --&gt; &lt;button id=&quot;reg_form_msg&quot;&gt;获取短信验证码&lt;/button&gt; &lt;/p&gt; &lt;!-- 注册协议 --&gt; &lt;div id=&quot;reg_form_isCheck&quot;&gt; &lt;input type=&quot;checkbox&quot; style=&quot;width: 14px;height: 14px;&quot; /&gt; &lt;span&gt;阅读并接受&lt;a href=&quot;#&quot;&gt;《百度用户协议》&lt;/a&gt;及&lt;a href=&quot;#&quot;&gt;《百度隐私权保护声明》&lt;/a&gt;&lt;/span&gt; &lt;/div&gt; &lt;!-- 注册按钮 --&gt; &lt;div id=&quot;reg_form_btn&quot;&gt; &lt;button type=&quot;button&quot;&gt;注册&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;!-- 注册二维码 --&gt; &lt;div id=&quot;reg_qrcode&quot;&gt; &lt;img src=&quot;img/qrcode.png&quot; /&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- --------------------注册 end---------------------- --&gt; &lt;!-- --------------------版权信息 begin----------------- --&gt; &lt;div id=&quot;copyright&quot;&gt; &lt;p&gt;2018 &amp;copy;Baidu&lt;/p&gt; &lt;/div&gt; &lt;!-- --------------------版权信息 end------------------- --&gt; &lt;/body&gt;&lt;/html&gt; baidu.css 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243COPY/* 采用什么编码解析文件 */@charset &quot;utf-8&quot;;/* ------------------------头部 begin---------------------- *//** 使用id选择器渲染id=&quot;head&quot;标签的样式*/#head &#123; width: 1000px; /* 宽度1000px */ /* 上外边距20px 左外边距自动计算居中 下外边距0px 右外边距自动计算居中 */ margin: 20px auto 0px auto;&#125;/** 使用id选择器定位到id=&quot;head&quot;标签* 然后渲染其子标签id=&quot;head_logo&quot;的样式*/#head #head_logo &#123; width: 330px; /* 宽度330px */ /* 设置背景图片不重复并靠右 */ background: url(../img/logo.png) right no-repeat; /* 设置背景的位置 y轴上移5px */ background-position-y: -5px; cursor: pointer; /* 鼠标变手势 */ float: left; /* 左浮动 */ /* 内下间距5px 为了和导航之间保持距离 */ padding-bottom: 5px;&#125;/** 使用id选择器定位到id=&quot;head&quot;标签* 然后渲染其子标签id=&quot;head_login&quot;的样式*/#head #head_login &#123; float: right; /* 右浮动 */ font-size: 10px; /* 字体大小 */ margin-top: 10px; /* 上外间距10px */&#125;/** 使用id选择器定位到id=&quot;head&quot;标签* 然后渲染其子标签id=&quot;head_login&quot;的子标签input的样式*/#head #head_login input &#123; font-weight: 700; /* 加粗 */ color: #666; /* 字体颜色 */ height: 32px; /* 输入框高度 */ width: 64px; /* 输入框宽度 */ border: 0; /* 边框为0 */ /* 设置背景图片不重复并通过具体坐标获取显示部分 */ background: url(../img/reg_icons.png) no-repeat 0 -48px; font-family: Arial, &quot;宋体&quot;; /* 字体种类 */&#125;/* ------------------------头部 end---------------------- *//* ------------------------导航 begin---------------------- *//** 使用id选择器渲染id=&quot;nav&quot;标签的样式*/#nav &#123; width: 1200px; /* 宽度1200px */ margin: 0 auto; /* 上外间距0px 居中 */&#125;/* ------------------------导航 end---------------------- *//* ------------------------注册 begin---------------------- *//** 使用id选择器渲染id=&quot;register&quot;标签的样式*/#register &#123; width: 950px; /* 宽度950px */ /* 上外边距20px 左外边距自动计算居中 下外边距0px 右外边距自动计算居中 */ margin: 20px auto 0px auto;&#125;/** 使用id选择器渲染id=&quot;register&quot;标签的样式* 然后渲染其子标签id=&quot;reg_form&quot;的样式*/#register #reg_form &#123; float: left; /* 左浮动 */ text-align: right; /* 文本靠右 */ font-size: 14px; /* 字体大小 */ color: #666; /* 字体颜色 */ font-weight: 700; /* 字体粗细 */&#125;/** 使用id选择器渲染id=&quot;register&quot;标签的样式* 然后渲染其子标签id=&quot;reg_form&quot;的子标签label的样式*/#register #reg_form label &#123; margin-right: 10px; /* 右外间距10px */&#125;/** 使用id选择器渲染id=&quot;register&quot;标签的样式* 然后渲染其子标签id=&quot;reg_form&quot;的子标签p的子标签input的样式*/#register #reg_form p input &#123; height: 38px; /* 高度38px */ width: 350px; /* 宽度350px */ border: 1px solid #ddd; /* 边框1px 实心线 颜色#ddd */ font-size: 14px; /* 字体大小 */ color: #666; /* 字体颜色 */ margin-bottom: 6px; /* 每个input底部外间距6px */ text-indent: 10px; /* 首行缩进10px */&#125;/** 使用id选择器渲染id=&quot;register&quot;标签的样式* 然后渲染其子标签id=&quot;reg_form&quot;的子标签id=&quot;reg_form_msg&quot;的样式*/#register #reg_form #reg_form_msg &#123; height: 42px; /* 高度42px */ width: 156px; /* 宽度156px */ background: #f7f7f7; /* 背景颜色 */ font-size: 14px; /* 字体大小 */ border: 1px solid #ddd; /* 边框1px 实心线 颜色#ddd */ cursor: pointer; /* 鼠标变手势 */&#125;/* 鼠标移动至指定标签改变样式 */#register #reg_form #reg_form_msg:hover &#123; background-color: #eee;&#125;/** 使用id选择器渲染id=&quot;register&quot;标签的样式* 然后渲染其子标签id=&quot;reg_form_isCheck&quot;的样式*/#register #reg_form_isCheck &#123; font-size: 10px; /* 字体大小 */ font-weight: 400; /* 字体粗细 */ margin-right: 30px; /* 设置右外间距30px */&#125;/** 使用id选择器渲染id=&quot;register&quot;标签的样式* 然后渲染其子标签id=&quot;reg_form_isCheck&quot;的子标签a的样式*/#register #reg_form_isCheck a &#123; text-decoration: none; /* 去除所有字体横线样式 */&#125;/** 使用id选择器渲染id=&quot;register&quot;标签的样式* 然后渲染其子标签id=&quot;reg_form_btn&quot;的子标签button的样式*/#register #reg_form_btn button &#123; height: 50px; /* 高度50px */ width: 352px; /* 宽度352px */ background: #4490f7; /* 背景颜色 */ border: 0; /* 边框0 */ color: white; /* 字体颜色 */ font-size: 16px; /* 字体大小 */ font-weight: 700; /* 字体粗细 */ border-radius: 3px; /* 边框变圆角 */ margin-top: 20px; /* 上外间距20px */ font-family: Arial, &quot;宋体&quot;; /* 字体类型 */ cursor: pointer; /* 鼠标变手势 */&#125;/** 使用id选择器渲染id=&quot;register&quot;标签的样式* 然后渲染其子标签id=&quot;reg_qrcode&quot;的样式*/#register #reg_qrcode &#123; float: right; /* 右浮动 */ margin-top: 15px; /* 上外间距15px */ margin-right: -10px; /* 右外间距-10px */&#125;/* ------------------------注册 end---------------------- *//* ---------------------版权信息 begin------------------- *//** 使用id选择器渲染id=&quot;copyright&quot;标签的样式*/#copyright &#123; text-align: center; /* 文本居中 */ color: #7a77c8; /* 字体颜色 */ font-size: 10px; /* 字体大小 */ margin-top: 520px; /* 上外间距520px */&#125;/* ---------------------版权信息 end------------------- */ 演示效果：","categories":[{"name":"前端","slug":"前端","permalink":"http://1530624156.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://1530624156.github.io/tags/CSS/"}]},{"title":"1.HTML基础","slug":"1-HTML基础","date":"2021-08-05T06:09:11.000Z","updated":"2021-08-05T06:11:05.166Z","comments":true,"path":"2021/08/05/1-HTML基础/","link":"","permalink":"http://1530624156.github.io/2021/08/05/1-HTML%E5%9F%BA%E7%A1%80/","excerpt":"","text":"1.HTTP和WEB工作原理 超文本传输协议（HTTP，HyperText Transfer Protocol）是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。 WEB 本意是蜘蛛网和网的意思。现广泛译作网络、互联网等技术领域。表现为三种形式，即超文本（hypertext）、超媒体（hypermedia）、超文本传输协议（HTTP）等。 当你想进入一个网页，或者其他网络资源的时候，通常你要首先在你的浏览器上键入你想访问网页的统一资源定位符（Uniform Resource Locator)，或者通过超链接方式链接到那个网页或网络资源。这之后的工作首先是 URL 的服务器名部分，被名为域名系统的分布于全球的因特网数据库解析，并根据解析结果决定进入哪一个 IP 地址。 接下来的步骤是给所要访问的网页，向在那个IP地址工作的服务器发送一个 HTTP 请求。在通常情况下，HTML 文本、图片和构成该网页的一切其他文件很快会被逐一请求并发送回用户。 网络浏览器接下来的工作是把 HTML、CSS 和其他接受到的文件所描述的内容，加上图像、链接和其他必须的资源，显示给用户。这些就构成了你所看到的“网页”。 大多数的网页自身包含有超链接指向其他相关网页，可能还有下载、源文献、定义和其他网络资源。像这样通过超链接，把有用的相关资源组织在一起的集合，就形成了一个所谓的信息的“网”。这个网在因特网上被方便使用，就构成了最早在 1990 年代初蒂姆·伯纳斯-李所说的万维网。 2.什么是HTML HTML 就是万维网中的超文本，HTML 也叫做超文本标记语言。“超文本”就是表示页面内可以包含非文字元素，如：图片、链接、音乐等等。在Web服务中，信息一般是使用 HTML 格式以超文本和超媒体方式传送的，所使用的 Internet 协议是 HTTP 协议。 HTML 是用来描述网页的一种语言。 HTML 指的是超文本标记语言 (Hyper Text Markup Language) HTML 是一种标记语言 (markup language) 标记语言是一套标记标签 (markup tag) HTML 使用标记标签来描述网页 它是一种建立网页文件的语言，通过标记式的指令（Tag），将影像、声音、图片、文字等链接显示出来。这种标记性语言是因特网上网页的主要语言。 HTML 网页文件可以使用记事本、写字板、HBuilder、Sublime 等编辑工具来编写，以 .htm 或.html 为文件后缀名保存。将 HTML 网页文件用浏览器打开显示，若测试没有问题则可以放到服务器（Server）上，对外发布信息。 123456789COPY&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 3. HTML基础语法3.1. &lt;!DOCTYPE html&gt; 格式一： &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; 格式二： &lt;!DOCTYPE html&gt; 推荐的方式 Document Type HyperText Mark-up Language，文档中超文本标记语言的类型，可告知浏览器怎么解析该文档。 由于使用的场景或者版本的更替间，HTML 使用的标准不同，所以需要浏览器按照不同的标准来解析 HTML 文本内容，这就需要告知浏览器我当前的 HTML 页面是按照那种方式进行编写的。没有该声明，将是你 HTML 噩梦的开始。这行代码必须写且务必在文档首行。 1COPY&lt;!DOCTYPE html&gt;&lt;!-- 必须写在HTML文件首行 --&gt; 3.2. &lt;html&gt;&lt;/html&gt;&lt;html&gt; 标签用于 HTML 文档的最开始，用来标识 HTML 文档的开始。而 &lt;/html&gt; 标志放在HTML 文档的结束，用来标识 HTML 文档的结束，两个标志必须一块使用。 123COPY&lt;!DOCTYPE html&gt;&lt;!-- 必须写在HTML文件首行 --&gt;&lt;html&gt;&lt;!-- HTML文档的开始 --&gt;&lt;/html&gt;&lt;!-- HTML文档的结束 --&gt; 3.3. &lt;head&gt;&lt;/head&gt; &lt;head&gt; 和 &lt;/head&gt; 构成 HTML 文档的开头部分。 &lt;head&gt; 和 &lt;/head&gt; 标签之间的内容是不会在浏览器的框内显示出来的，两个标志必须一块使用。 在此标志对之间可以使用 &lt;title&gt;&lt;/title&gt; 、 &lt;meta&gt; 、 &lt;link&gt; 、 &lt;script&gt;&lt;/script&gt;等标签。 &lt;meta&gt; ：用来提供关于文档的信息，起始属性为： charset=&quot;utf8&quot; 。表示告诉浏览器页面采用什么编码解析文档，一般来说我们就用 utf8。当然，文件保存的时候也是 utf8，而浏览器也设置 utf8即可正确显示。 &lt;link&gt; ：用来引入 CSS 文件。 &lt;style&gt;&lt;/style&gt; ：编写 CSS 代码。 &lt;script&gt;&lt;/script&gt; ：用来引入 JS 文件或编写 JS 代码。 123456789101112COPY&lt;!DOCTYPE html&gt;&lt;!-- 必须写在HTML文件首行 --&gt;&lt;html&gt; &lt;!-- HTML文档的开始 --&gt; &lt;head&gt; &lt;!-- HTML文档的开头部分 --&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;&lt;!-- 文档属性 --&gt; &lt;title&gt;&lt;/title&gt;&lt;!-- 文档标题 --&gt; &lt;link href=&quot;css文件的路径&quot; /&gt;&lt;!-- 引入css文件 --&gt; &lt;style&gt;&lt;/style&gt;&lt;!-- 编写css代码 --&gt; &lt;script src=&quot;js文件的路径&quot;&gt;&lt;/script&gt;&lt;!-- 引入js文件或者编写js代码 --&gt; &lt;/head&gt;&lt;!-- HTML文档的开头结束 --&gt;&lt;/html&gt;&lt;!-- HTML文档的结束 --&gt; 3.4. &lt;title&gt;&lt;/title&gt; &lt;title&gt; 定义文档的标题。浏览器会以特殊的方式来使用标题，并且通常把它放置在浏览器窗口的标题栏或状态栏上。同样，当把文档加入用户的链接列表或者收藏夹或书签列表时，标题将成为该文档链接的默认名称。 注意： &lt;title&gt; 标签位于 &lt;head&gt; 标签内，是 &lt;head&gt; 标签中唯一要求包含的东西。 3.5. &lt;meta&gt;&lt;/meta&gt; &lt;meta/&gt;用来提供关于文档的信息。 1234567891011121314COPY&lt;!DOCTYPE html&gt;&lt;!-- 必须写在HTML文件首行 --&gt;&lt;html&gt; &lt;!-- HTML文档的开始 --&gt; &lt;head&gt; &lt;!-- HTML文档的开头部分 --&gt; &lt;!-- SEO搜索引擎优化策略 --&gt; &lt;!-- 网站标题 --&gt; &lt;title&gt;&lt;/title&gt; &lt;!-- 详细描述 --&gt; &lt;meta name=&quot;description&quot; content=&quot;这里写网站内容描述&quot; /&gt; &lt;!-- 关键词 --&gt; &lt;meta name=&quot;keywords&quot; content=&quot;这里写关键词&quot; /&gt; &lt;/head&gt;&lt;!-- HTML文档的开头结束 --&gt;&lt;/html&gt;&lt;!-- HTML文档的结束 --&gt; 以上三部分是SEO搜索引擎优化的主要部分。 3.6. &lt;body&gt;&lt;/body&gt; 一般情况下浏览器上显示的内容的都放在body中，不排除其他标签可以不用body，比如frameset框架集标签。​ &lt;body&gt; 和 &lt;/body&gt; 是HTML文档的主体部分，在此标志对之间可包含 &lt;p&gt;&lt;/p&gt; 、 &lt;h1&gt;&lt;/h1&gt; 、 &lt;br&gt;、 &lt;hr&gt; 等众多的标志。它们所定义的文本、图像等将会在浏览器的框内显示出来。 1234567891011121314151617COPY&lt;!DOCTYPE html&gt;&lt;!-- 必须写在HTML文件首行 --&gt;&lt;html&gt; &lt;!-- HTML文档的开始 --&gt; &lt;head&gt; &lt;!-- HTML文档的开头部分 --&gt; &lt;!-- SEO搜索引擎优化策略 --&gt; &lt;!-- 网站标题 --&gt; &lt;title&gt;&lt;/title&gt; &lt;!-- 详细描述 --&gt; &lt;meta name=&quot;description&quot; content=&quot;这里写网站内容描述&quot; /&gt; &lt;!-- 关键词 --&gt; &lt;meta name=&quot;keywords&quot; content=&quot;这里写关键词&quot; /&gt; &lt;/head&gt;&lt;!-- HTML文档的开头结束 --&gt; &lt;body&gt; &lt;!-- HTML文档的主体部分开始 --&gt; &lt;/body&gt;&lt;!-- HTML文档的主体部分结束 --&gt;&lt;/html&gt;&lt;!-- HTML文档的结束 --&gt; 4.HTML常用标签和属性 HTML 页面是由标签组成，不同的标签浏览器对其进行不同样式和内容的渲染 ，我们需要记忆常用的标签即可。大致可分为如下几类：头标签、标题、水平线、段落、换行、图片、表格、超链接、列表、表单、下拉列表、div 和 span、格式化文字的。 HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。 属性总是以名称/值对的形式出现，比如：name=”value”。 属性总是在 HTML 元素的开始标签中规定。 4.1. HTML标题 HTML 标题（Heading）是通过 &lt;h1&gt; - &lt;h6&gt; 等标签进行定义的。 123456789COPY&lt;body&gt; &lt;!-- HTML 标题（Heading）是通过 &lt;h1&gt; - &lt;h6&gt; 等标签进行定义的 --&gt; &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;h2&gt;This is a heading&lt;/h2&gt; &lt;h3&gt;This is a heading&lt;/h3&gt; &lt;h4&gt;This is a heading&lt;/h4&gt; &lt;h5&gt;This is a heading&lt;/h5&gt; &lt;h6&gt;This is a heading&lt;/h6&gt;&lt;/body&gt; 4.2. HTML段落 HTML 段落是通过 &lt;p&gt; 标签进行定义的。 123456COPY&lt;body&gt; &lt;!-- HTML 段落是通过 &lt;p&gt; 标签进行定义的 --&gt; &lt;p&gt;This is a paragraph.&lt;/p&gt; &lt;p&gt;This is another paragraph.&lt;/p&gt;&lt;/body&gt;COPY **注意**：浏览器会自动地在标题和段落的前后添加空行。 4.3. HTML水平线 &lt;hr /&gt; 标签在 HTML 页面中创建水平线。 &lt;hr /&gt;元素可用于分隔内容。 4.4. HTML注释 可以将注释插入 HTML 代码中，这样可以提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们。 &lt;!-- This is a comment --&gt; 4.5. HTML换行&lt;br /&gt; 元素是一个空的 HTML 元素。由于关闭标签没有任何意义，因此它没有结束标签。&lt;br&gt; 还是&lt;br /&gt; 您也许发现 &lt;br&gt; 与 &lt;br /&gt; 很相似。在 XHTML、XML 以及未来的 HTML版本中，不允许使用没有结束标签（闭合标签）的 HTML 元素。即使 &lt;br /&gt; 在所有浏览器中的显示都没有问题，使用 &lt;br /&gt; 也是更长远的保障。 4.6. HTML链接 HTML 链接是通过 &lt;a&gt; 标签进行定义的。 1234COPY&lt;body&gt; &lt;!-- HTML 链接是通过 &lt;a&gt; 标签进行定义的 --&gt; &lt;a href=&quot;http://www.shsxt.com&quot;&gt;This is a link&lt;/a&gt;&lt;/body&gt; 4.7. HTML图像 HTML 图像是通过 &lt;img /&gt; 标签进行定义的。​ 图像的名称和尺寸是以属性的形式提供的。 1234COPY&lt;body&gt; &lt;!-- HTML 图像是通过 &lt;img /&gt; 标签进行定义的 --&gt; &lt;img src=&quot;img/1.jpg&quot; title=&quot;这是一个图片&quot; /&gt;&lt;/body&gt; 4.8. HTML格式化(了解) 文本格式化标签。 标签 描述 &lt; b &gt; 定义粗体文本 &lt; big &gt; 定义大号字 &lt; em &gt; 定义着重文字 &lt; i &gt; 定义斜体字 &lt; small &gt; 定义小号字 &lt; strong &gt; 定义加重语气 &lt; sub &gt; 定义下标字 &lt; sup &gt; 定义上标字 &lt; ins &gt; 定义插入字 &lt; del &gt; 定义删除字 4.9. HTML元素 HTML 文档是由 HTML 元素定义的。​ HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。 开始标签 元素内容 结束标签 &lt; p &gt; This is a paragraph &lt; /p &gt; &lt; a href=”default.htm” &gt; This is a link &lt; /a &gt; &lt; br /&gt; 注意：开始标签常被称为开放标签（opening tag），结束标签常称为闭合标签（closing tag）。 4.9.1. HTML语法 HTML 元素以开始标签起始 HTML 元素以结束标签终止 元素的内容是开始标签与结束标签之间的内容 某些 HTML 元素具有空内容（empty content） 空元素在开始标签中进行关闭（以开始标签的结束而结束） 大多数 HTML 元素可拥有属性 4.9.2. 嵌套的 HTML 元素 大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素）。 HTML 文档由嵌套的 HTML 元素构成。 4.9.3. HTML 文档实例12345COPY&lt;html&gt; &lt;body&gt; &lt;p&gt;This is my first paragraph.&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 上面的例子包含三个 HTML 元素。 4.9.4. HTML 实例解释4.9.4.1.元素1COPY&lt;p&gt;This is my first paragraph.&lt;/p&gt; 这个 &lt;p&gt; 元素定义了 HTML 文档中的一个段落。​ 这个元素拥有一个开始标签 &lt;p&gt; ，以及一个结束标签 &lt;/p&gt; 。​ 元素内容是：This is my first paragraph . 4.9.4.2.&lt;body&gt; 元素123COPY&lt;body&gt; &lt;p&gt;This is my first paragraph.&lt;/p&gt;&lt;/body&gt; &lt;body&gt; 元素定义了 HTML 文档的主体。​ 这个元素拥有一个开始标签 &lt;body&gt; ，以及一个结束标签 &lt;/body&gt; 。​ 元素内容是另一个 HTML 元素（p 元素）。 4.9.4.3. &lt;html&gt; 元素12345COPY&lt;html&gt; &lt;body&gt; &lt;p&gt;This is my first paragraph.&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; &lt;html&gt; 元素定义了整个 HTML 文档。​ 这个元素拥有一个开始标签 &lt;html&gt; ，以及一个结束标签 &lt;/html&gt; 。​ 元素内容是另一个 HTML 元素（body 元素）。不要忘记结束标签。​ 即使您忘记了使用结束标签，大多数浏览器也会正确地显示 HTML。 123COPY&lt;!-- 下面的写法不推荐 --&gt;&lt;p&gt;This is my first paragraph.&lt;p&gt;This is my first paragraph. 上面的例子在大多数浏览器中都没问题，但不要依赖这种做法。忘记使用结束标签会产生不可预料的结果或错误。​ 注意：未来的 HTML 版本不允许省略结束标签。 4.9.4.4. 空的 HTML 元素 没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。​ &lt;br&gt; 就是没有关闭标签的空元素（ &lt;br&gt; 标签定义换行）。​ 在未来版本的 HTML 中，所有元素都必须被关闭。​ 在开始标签中添加斜杠，比如 &lt;br /&gt;，是关闭空元素的正确方法。​ 即使 &lt;br&gt; 在所有浏览器中都是有效的，但使用 &lt;br /&gt; 其实是更长远的保障。 4.9.4.5. HTML提示：使用小写标签 HTML 标签对大小写不敏感： &lt;P&gt; 等同于&lt;p&gt; 。​ W3School 使用的是小写标签，因为万维网联盟（W3C）在 HTML 4 中推荐使用小写，在未来 HTML版本中强制使用小写。 4.10. div和span &lt;div&gt; 是一个块级元素，通常与css配合使用，用于布局。 &lt;div&gt; 标签可以把文档分割为独立的、不同的部分。它可以用作严格的组织工具，并且不使用任何格式与其关联。 &lt;div&gt; 是一个块级元素。这意味着它的内容自动地开始一个新行。实际上，换行是 &lt;div&gt; 固有的唯一格式表现。可以通过 &lt;div&gt; 的 class 或 id 应用额外的样式。 12345678910111213COPY&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;HTML_div_span&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 构建一个div 设置边框黑色1px 宽度200px高度200px 字体居中 --&gt; &lt;div style=&quot;border: 1px solid black;width: 200px;height: 200px;textalign: center;&quot;&gt;这是一个div&lt;/div&gt; &lt;!-- 构建一个span 字体为红色 --&gt; &lt;span style=&quot;color: red;&quot;&gt;这是一个span&lt;/span&gt; &lt;/body&gt;&lt;/html&gt; 标签的分类：HTML 中标签元素三种不同类型：块状元素，行内元素，行内块状元素。 块级元素特点： 元素都从新的一行开始，并且其后的元素也另起一行；元素的高度、宽度、行高以及顶和底边距都可设置；元素宽度在不设置的情况下，是它本身父容器的 100%（和父元素的宽度一致），除非设定一个宽度。 行内元素特点 ：和其他元素都在一行上；元素的高度、宽度及顶部和底部边距不可设置；元素的宽度就是它包含的文字或图片的宽度，不可改变。 行内块状元素的特点：和其他元素都在一行上；元素的高度、宽度、行高以及顶和底边距都可设置。 可通过浏览器查看是何种元素，后期也可以通过 CSS 进行修改。 4.11. HTML表格 表格由 &lt;table&gt; 标签来定义。每个表格均有若干行（由 &lt;tr&gt; 标签定义），每行被分割为若干单元格（由 &lt;td&gt; 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。 表格和边框属性 如果不定义边框属性，表格将不显示边框。有时这很有用，但是大多数时候，我们希望显示边框。 表格的表头 表格的表头使用 &lt;th&gt; 标签进行定义。​ 大多数浏览器会把表头显示为粗体居中的文本。 表格中的空单元格 在一些浏览器中，没有内容的表格单元显示得不太好。如果某个单元格是空的（没有内容），浏览器可能无法显示出这个单元格的边框。 这个空的单元格的边框没有被显示出来。为了避免这种情况，在空单元格中添加一个空格占位符 ，就可以将边框显示出来。 12345678910111213141516171819202122232425262728293031COPY&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;HTML表格&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 表格标签 属性border=&quot;1&quot; 添加表格边框粗细为1 --&gt; &lt;table border=&quot;1&quot;&gt; &lt;!-- 设置表格标题 --&gt; &lt;caption&gt; &lt;h3&gt;这是一个表格&lt;/h3&gt; &lt;/caption&gt; &lt;!-- 定义行 --&gt; &lt;tr&gt; &lt;!-- th定义列 一般写在表格首行 内容会被加粗居中 --&gt; &lt;th&gt;Heading&lt;/th&gt; &lt;th&gt;Another Heading&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!-- td定义列 --&gt; &lt;td&gt;row 1, cell 1&lt;/td&gt; &lt;td&gt;row 1, cell 2&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;row 2, cell 2&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt; 4.12. HTML列表4.12.1. 无序列表 无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。​ 无序列表始于 &lt;ul&gt; 标签。每个列表项始于&lt;li&gt; 。​ 列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。 123456789101112131415COPY&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;HTML列表&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h4&gt;一个无序列表：&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;咖啡&lt;/li&gt; &lt;li&gt;茶&lt;/li&gt; &lt;li&gt;牛奶&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; 4.12.2. 有序列表 有序列表也是一列项目，列表项目使用数字进行标记。​ 有序列表始于 &lt;ol&gt; 标签。每个列表项始于 &lt;li&gt; 标签。​ 列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。 1234567891011121314151617181920COPY&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;HTML列表&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h4&gt;一个有序列表：&lt;/h4&gt; &lt;ol&gt; &lt;li&gt;咖啡&lt;/li&gt; &lt;li&gt;牛奶&lt;/li&gt; &lt;li&gt;茶&lt;/li&gt; &lt;/ol&gt; &lt;ol start=&quot;50&quot;&gt; &lt;li&gt;咖啡&lt;/li&gt; &lt;li&gt;牛奶&lt;/li&gt; &lt;li&gt;茶&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt;&lt;/html&gt; 4.13. HTML表单4.13.1. &lt;form&gt; 元素 HTML 表单用于收集用户输入。​ 表单元素指的是不同类型的 input 元素、复选框、单选按钮、提交按钮等等。​ 表单用于向服务器传输数据。form 元素是块级元素。 常用属性 属性 值 描述 action URL 规定当提交表单时向何处发送表单数据 method get、post 规定用于发送 form-data 的 HTTP 方法 name Form_name 规定表单的名称 4.13.2. &lt;input&gt; 元素 &lt;input&gt; 元素是最重要的表单元素。​ &lt;input&gt; 元素有很多形态，根据不同的 type 属性。​ 常用属性 属性 值 描述 alt text 定义图像输入的替代文本 checked checked 规定此 input 元素首次加载时应当被选中 disabled disabled 当 input 元素加载时禁用此元素 readonly readonly 规定输入字段为只读 maxlength number 规定输入字段中的字符的最大长度 value value 规定 input 元素的值 type button checkbox file hidden image password radio reset submit text 规定 input 元素的类型按钮 复选框 文件 隐藏域 图像形按钮 密码 单选框 重置按钮 提交按钮 文 本 4.13.2.1. text 文本输入 &lt;input type=&quot;text&quot;&gt; 定义用于文本输入的单行输入字段。 123456COPY&lt;form&gt; First name:&lt;br&gt; &lt;input type=&quot;text&quot; name=&quot;firstname&quot; /&gt; &lt;br&gt; Last name:&lt;br&gt; &lt;input type=&quot;text&quot; name=&quot;lastname&quot; /&gt;&lt;/form&gt; 4.13.2.2. password 密码输入 &lt;input type=&quot;password&quot;&gt; 定义密码字段。 12345COPY&lt;form&gt; 用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt; &lt;br /&gt; 密&amp;nbsp;&amp;nbsp;&amp;nbsp;码：&lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;&lt;/form&gt; 4.13.2.3. radio 单选按钮输入 &lt;input type=&quot;radio&quot;&gt; 定义单选按钮。 12345COPY&lt;form&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot; checked /&gt;Male &lt;br&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot; /&gt;Female&lt;/form&gt; 4.13.2.4. checkbox 复选框 &lt;input type=&quot;checkbox&quot;&gt; 定义复选框。​ 复选框允许用户在有限数量的选项中选择零个或多个选项。 12345COPY&lt;form&gt; &lt;input type=&quot;checkbox&quot; name=&quot;vehicle&quot; value=&quot;Bike&quot; /&gt;I have a bike &lt;br&gt; &lt;input type=&quot;checkbox&quot; name=&quot;vehicle&quot; value=&quot;Car&quot; /&gt;I have a car&lt;/form&gt; 4.13.2.5. submit 提交按钮&lt;input type=&quot;submit&quot;&gt; 定义用于向表单处理程序（form-handler）提交表单的按钮。表单处理程序通常是包含用来处理输入数据的脚本的服务器页面。 action 属性action 属性定义在提交表单时执行的动作。向服务器提交表单的通常做法是使用提交按钮。通常，表单会被提交到 web 服务器上的网页。如果省略 action 属性，则 action 会被设置为访问当前页面。 123456789COPY&lt;form action=&quot;http://www.shsxt.com&quot;&gt; First name: &lt;input type=&quot;text&quot; name=&quot;firstname&quot; value=&quot;Mickey&quot; /&gt; &lt;br /&gt; Last name: &lt;input type=&quot;text&quot; name=&quot;lastname&quot; value=&quot;Mouse&quot; /&gt; &lt;br /&gt;&lt;br /&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;&lt;/form&gt; 4.13.2.6. select 下拉列表 定义一个下拉列表。 123456COPY&lt;select name=&quot;city&quot;&gt; &lt;option value=&quot;sh&quot;&gt;上海&lt;/option&gt; &lt;option value=&quot;bj&quot;&gt;北京&lt;/option&gt; &lt;option value=&quot;ah&quot;&gt;安徽&lt;/option&gt; &lt;option value=&quot;zz&quot;&gt;郑州&lt;/option&gt;&lt;/select&gt; 4.13.2.7. textarea 文本域 该标签定义多行的文本输入控件。文本区中可容纳无限数量的文本，可以通过 cols 和 rows 属性来规定 textarea 的尺寸。cols 规定文本区内的可见宽度。rows 规定文本区内的可见行数。 123COPY&lt;textarea name=&quot;message&quot; rows=&quot;10&quot; cols=&quot;30&quot;&gt; The cat was playing in the garden.&lt;/textarea&gt; 4.13.2.8. button 按钮 &lt;button&gt; 元素定义可点击的按钮。​ 常用属性 属性 值 描述 disabled disabled 禁用该按钮 type button、submit、reset 规定按钮的类型 value text 规定按钮的初始值 name button_name 规定按钮的名称 1COPY&lt;button type=&quot;button&quot;&gt;Click Me!&lt;/button&gt; 4.13.2.9. label 标注标签 &lt;label&gt; 标签为input 元素定义标注（标记）。​ label元素不会呈现任何的特殊效果。label 标签的 for 属性应当与相关元素的 id 属性相同。 12COPY&lt;label for=&quot;username&quot;&gt;用户名：&lt;/label&gt;&lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;/&gt; 4.14. HTML属性 HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。​ 属性总是以名称/值对的形式出现，比如：name=”value”。​ 属性总是在 HTML 元素的开始标签中规定。 4.14.1. HTML提示：使用小写属性 属性和属性值对大小写不敏感。​ 不过，万维网联盟在其 HTML 4 推荐标准中推荐小写的属性/属性值。​ 而新版本的 HTML 要求使用小写属性。 4.14.2. 始终为属性值加引号 属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。​ 在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号，例如： 1COPY&lt;input name=&#x27;Bill &quot;HelloWorld&quot; Gates&#x27; /&gt; 根据百度百科查询自己喜欢的人物，制作其人物简历。（css文件直接导入，按照文档样式说明使用） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146COPY&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;!-- 文档的属性 告诉浏览器采用什么编码解析 --&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;人物简历——吴彦祖&lt;/title&gt; &lt;!-- 引入 CSS 文件 --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/resume.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 整个页面布局 --&gt; &lt;div id=&quot;container&quot;&gt; &lt;!-- h1 标题标签 --&gt; &lt;h1&gt;人物简历——吴彦祖&lt;/h1&gt; &lt;!-- 导航信息 --&gt; &lt;div id=&quot;navigation&quot;&gt; &lt;!-- 无序列表 --&gt; &lt;ul&gt; &lt;!-- a 配置了锚点 --&gt; &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;基本信息&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;早年经历&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;演艺经历&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;获奖记录&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;社会活动&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;联系方式&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;!-- 图片和视频 --&gt; &lt;div class=&quot;center&quot;&gt; &lt;img class=&quot;margin&quot; src=&quot;img/Daniel_Wu.jpg&quot; title=&quot;吴彦祖&quot; width=&quot;200px&quot; height=&quot;277px&quot; /&gt; &lt;video class=&quot;margin&quot; src=&quot;mp4/Daniel_Wu.mp4&quot; title=&quot;吴彦祖晒偶像照为其庆生&quot; controls height=&quot;277px&quot;&gt;&lt;/video&gt; &lt;/div&gt; &lt;!-- 所有人物信息 --&gt; &lt;div id=&quot;1&quot; class=&quot;margin&quot;&gt; &lt;!-- 基本信息 --&gt; &lt;div class=&quot;word&quot;&gt; &lt;h2&gt;基本信息&lt;/h2&gt; &lt;p&gt;吴彦祖（Daniel Wu），1974年9月30日出生于美国旧金山，华语影视男演员、导演、制片人，毕业于美国俄勒冈大学。1998年出演了个人首部电影作品《美少年之恋》，从而踏入演艺圈；同年，凭借文艺片《玻璃之城》提名第18届香港电影金像奖最佳新演员。2001年，主演文艺片《游园惊梦》。2003年，凭借动作片《旺角黑夜》提名第24届香港电影金像奖最佳男主角；同年，首次担任电影监制并主演了惊悚片《妖夜回廊》。 &lt;/p&gt; &lt;/div&gt; &lt;!-- 早年经历信息 --&gt; &lt;div id=&quot;2&quot; class=&quot;word&quot;&gt; &lt;h2&gt;早年经历&lt;/h2&gt; &lt;p&gt; 吴彦祖出生于加利福尼亚州伯克利，并在奥林达长大。6岁时，吴彦祖在看完功夫电影《少林寺》后，对武术产生了兴趣。11岁时，吴彦祖便拜一名北京艺人为师开始习武，教他的师父是吴彦祖的母亲找的，而此前，他的母亲还担心他学会了功夫跟人打架，但最后还是拗不过他对习武的热情。高中时，吴彦祖也曾叛逆过，经常在街上玩滑板，听的是朋克、重金属、饶舌等地下音乐，喜欢打架更甚于学习。这一切直至他的母亲因心脏病住院才有了彻底的改变。在母亲生病期间，吴彦祖白天在学校认真读书，下课后就到医院陪母亲。为此他甚至去学习了简单的气功疗法，用来辅助母亲的治疗。 &lt;/p&gt; &lt;p&gt; 1993年，吴彦祖在美国俄勒冈大学攻读建筑系，并获得建筑副修奖学金。1994年，吴彦祖赢得California Martial Art Competitions的亚军，并在美国西岸排名第二位。同时，吴彦祖还成立了俄勒冈大学中国武术学会，并成为第一任教练，收了二十几个徒弟，一共教了五年。1995年，吴彦祖随师父到北京什刹海武校参加集训，并获得了北京国际武术比赛长拳组第五名，太极拳组第六名。 &lt;/p&gt; &lt;p&gt; 1997年，毕业后的吴彦祖前往香港旅行，后在姐姐的建议下开始当模特。四个月后，导演杨凡在看到吴彦祖拍摄的服装广告后，与他接洽成为他下一部电影的演员，而吴彦祖表示自己没有表演经验而拒绝了。后来杨凡天天给吴彦祖打电话并说服了他。 &lt;/p&gt; &lt;/div&gt; &lt;!-- 演艺经历信息 --&gt; &lt;div id=&quot;3&quot;&gt; &lt;h2&gt;演艺经历&lt;/h2&gt; &lt;table border=&quot;1&quot; align=&quot;center&quot; cellspacing=&quot;0&quot;&gt; &lt;tr&gt; &lt;th&gt;时期&lt;/th&gt; &lt;th&gt;经历&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!-- td列标签 无任何效果 --&gt; &lt;td&gt;1998年&lt;/td&gt; &lt;td&gt;《美少年之恋》，他在片中饰演帅气十足的警察Sam&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1999年&lt;/td&gt; &lt;td&gt;吴彦祖与成龙、舒淇合作主演的爱情喜剧片《玻璃樽》上映&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2000年&lt;/td&gt; &lt;td&gt;首次与林超贤导演合作，并出演了警匪动作片《重装警察》&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2001年&lt;/td&gt; &lt;td&gt;与古天乐合作出演了动作片《野兽之瞳》，在片中饰演一对拳击兄弟&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2002年&lt;/td&gt; &lt;td&gt;吴彦祖与杨千嬅首次合作，并出演了爱情喜剧片《新扎师妹》&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2004年&lt;/td&gt; &lt;td&gt;与张柏芝合作，出演由尔冬升执导的动作剧情片《旺角黑夜》 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2005年&lt;/td&gt; &lt;td&gt;吴彦祖与梁家辉、郑秀文合作，主演了根据同名小说改编的爱情片《长恨歌》 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2006年&lt;/td&gt; &lt;td&gt;吴彦祖执导并担任编剧的个人电影处女作《四大天王》上映&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2016年&lt;/td&gt; &lt;td&gt;由邓肯·琼斯执导的奇幻动作片《魔兽》在中国内地上映，吴彦祖在片中饰演了狡猾又残忍的古尔丹&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2017年&lt;/td&gt; &lt;td&gt;吴彦祖主演的功夫美剧《荒原第二季》在美国AMC电视台首播&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2018年&lt;/td&gt; &lt;td&gt;与艾丽西亚·维坎德主演的动作奇幻片《古墓丽影：源起之战》在美国和中国内地同步上映&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;!-- 获奖记录信息 --&gt; &lt;div id=&quot;4&quot; class=&quot;word&quot;&gt; &lt;h2&gt;获奖记录&lt;/h2&gt; &lt;p&gt;作业：请参照&lt;a href=&quot;https://baike.baidu.com/item/%E5%90%B4%E5%BD%A6%E7%A5%96/182990?fr=aladdin#1&quot; target=&quot;_blank&quot;&gt;吴彦祖百度百科&lt;/a&gt;完成获奖记录的表格&lt;/p&gt; &lt;/div&gt; &lt;!-- 社会活动信息 --&gt; &lt;div id=&quot;5&quot; class=&quot;word&quot;&gt; &lt;h2&gt;社会活动&lt;/h2&gt; &lt;p&gt;2006年底，在香港“SuperStars”影展及摄影集慈善义卖活动上，余文乐、吴彦祖、郭富城等300多位明星为慈善活动所拍摄的裸照曝光。&lt;/p&gt; &lt;p&gt;2008年6月4日，吴彦祖录制爱心视频并参与了周迅发起的“星星之火，传爱四川”行动 。&lt;/p&gt; &lt;p&gt;2009年2月，吴彦祖为四川地震灾区彭州小鱼洞的群众修建永久性房屋；5月10日，吴彦祖参加了“壹家人壹起走——纪念5.12汶川行”活动 ；7月6日，吴彦祖向四川地震灾区出资捐建5间房屋，并且表示每年都会抽出几次时间去四川探访 ；9月20日，吴彦祖携手吴君如在香港出席了“仁人家园义工周”的公益活动 。&lt;/p&gt; &lt;p&gt;2013年11月1日，“2014爱·家庭慈善月历”在香港推出，包括吴彦祖等在内的12个明星家庭齐心推动此公益活动。&lt;/p&gt; &lt;/div&gt; &lt;!-- 联系方式信息 --&gt; &lt;div id=&quot;6&quot;&gt; &lt;h2&gt;联系方式&lt;/h2&gt; &lt;form action=&quot;mailto://124059770@qq.com&quot;&gt; &lt;p&gt;请将你想告诉我的话发送至我的邮箱：&lt;/p&gt; &lt;textarea&gt;&lt;/textarea&gt;&lt;br /&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; &lt;/form&gt; &lt;/div&gt; &lt;!-- 返回顶部超链接 --&gt; &lt;div class=&quot;center&quot;&gt; &lt;a href=&quot;#&quot;&gt;返回顶部&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 版权信息 --&gt; &lt;div class=&quot;center&quot; id=&quot;copyright&quot;&gt; &lt;p&gt;©2018 Baidu 使用百度前必读 | 百科协议 | 隐私政策 | 百度百科合作平台 | 京ICP证030173号&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; resume.css 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108COPY/* 采用什么编码解析文件 */@charset &quot;utf-8&quot;;/* * 使用id选择器渲染id=&quot;container&quot;标签的样式 */#container &#123; /* * 上外边距是 0px * 右外边距是缩进15% * 下外边距是 0px * 左外边距是 0px */ margin: 0 15%; background: #F0F0F0;/* 背景色#F0F0F0 */&#125;/* * 使用元素选择器渲染所有h1标签的样式 */h1 &#123; height: 70px;/* 高度70px */ background: cornflowerblue;/* 背景色矢车菊蓝德国国花 */ line-height: 70px;/* 行间距70px */ color: white;/* 字体白色 */ text-indent: 70px;/* 段落缩进70px */&#125;/* * 使用id选择器渲染id=&quot;navigation&quot;标签的样式 */#navigation &#123; text-align: center;/* 居中 */&#125;/* * 使用id选择器定位到id=&quot;navigation&quot;标签 * 然后渲染其子标签li的样式 */#navigation li &#123; /* inline-block将li元素变为行内块元素 */ display: inline-block; width: 100px;/* 宽100px */ height: 30px;/* 高30px */ line-height: 30px;/* 行间距30px */ background-color: cornflowerblue;/* 背景色矢车菊蓝 */ border: cornflowerblue 1px solid;/* 边框1px 颜色为矢车菊蓝 */ border-radius: 0 10px;/* 边框左下角和右上角变圆10px */&#125;/* * 使用id选择器定位到id=&quot;navigation&quot;标签 * 然后渲染其子标签li的子标签a的样式 */#navigation li a&#123; color: white;/* 字体白色 */ text-decoration: none;/* 移除超链接下划线样式*/&#125;/* * 使用id选择器定位到id=&quot;navigation&quot;标签 * 然后渲染其子标签li的子标签a的样式(渲染方式鼠标移动至标签后) */#navigation li a:hover &#123; font-weight: bold;/* 字体加粗 */&#125;/* * 使用类选择器渲染所有class=&quot;center&quot;标签的样式 */.center &#123; text-align: center;/* 居中 */&#125;/* * 使用类选择器渲染所有class=&quot;word&quot;标签的样式 * 然后渲染其子标签p的样式 */.word p &#123; text-indent: 32px;/* 段落缩进32px */&#125;/* * 使用类选择器渲染所有class=&quot;margin&quot;标签的样式 */.margin &#123; margin: 0 30px;&#125;/* * 使用元素选择器渲染所有textarea标签的样式 */textarea &#123; width: 100%;/* 宽100%于父标签 */ height: 100px;/* 高100px */&#125;/* * 使用id选择器渲染id=&quot;copyright&quot;标签的样式 */#copyright &#123; height: 70px;/* 高70px */ background: cornflowerblue;/* 背景色矢车菊蓝 */ text-align: center;/* 居中 */ color: white;/* 字体白色 */ line-height: 70px;/* 行间距70px */ font-size: 12px;/* 字体大小12px */&#125; 演示效果：","categories":[{"name":"前端","slug":"前端","permalink":"http://1530624156.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://1530624156.github.io/tags/HTML/"}]},{"title":"常用的几种编码方式及其特点","slug":"常用的几种编码方式及其特点","date":"2021-08-05T05:55:56.000Z","updated":"2021-08-05T05:59:42.879Z","comments":true,"path":"2021/08/05/常用的几种编码方式及其特点/","link":"","permalink":"http://1530624156.github.io/2021/08/05/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%85%B6%E7%89%B9%E7%82%B9/","excerpt":"","text":"几种编码方式的特点1.ASCII编码ASCII ((American Standard Code for Information Interchange): 美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。它是最通用的信息交换标准，并等同于国际标准ISO/IEC 646。ASCII第一次以规范标准的类型发表是在1967年，最后一次更新则是在1986年，到目前为止共定义了128个字符 。 ASCII码表具体如下所示 Bin(二进制) Oct(八进制) Dec(十进制) Hex(十六进制) 缩写/字符 解释 0000 0000 00 0 0x00 NUL(null) 空字符 0000 0001 01 1 0x01 SOH(start of headline) 标题开始 0000 0010 02 2 0x02 STX (start of text) 正文开始 0000 0011 03 3 0x03 ETX (end of text) 正文结束 0000 0100 04 4 0x04 EOT (end of transmission) 传输结束 0000 0101 05 5 0x05 ENQ (enquiry) 请求 0000 0110 06 6 0x06 ACK (acknowledge) 收到通知 0000 0111 07 7 0x07 BEL (bell) 响铃 0000 1000 010 8 0x08 BS (backspace) 退格 0000 1001 011 9 0x09 HT (horizontal tab) 水平制表符 0000 1010 012 10 0x0A LF (NL line feed, new line) 换行键 0000 1011 013 11 0x0B VT (vertical tab) 垂直制表符 0000 1100 014 12 0x0C FF (NP form feed, new page) 换页键 0000 1101 015 13 0x0D CR (carriage return) 回车键 0000 1110 016 14 0x0E SO (shift out) 不用切换 0000 1111 017 15 0x0F SI (shift in) 启用切换 0001 0000 020 16 0x10 DLE (data link escape) 数据链路转义 0001 0001 021 17 0x11 DC1 (device control 1) 设备控制1 0001 0010 022 18 0x12 DC2 (device control 2) 设备控制2 0001 0011 023 19 0x13 DC3 (device control 3) 设备控制3 0001 0100 024 20 0x14 DC4 (device control 4) 设备控制4 0001 0101 025 21 0x15 NAK (negative acknowledge) 拒绝接收 0001 0110 026 22 0x16 SYN (synchronous idle) 同步空闲 0001 0111 027 23 0x17 ETB (end of trans. block) 结束传输块 0001 1000 030 24 0x18 CAN (cancel) 取消 0001 1001 031 25 0x19 EM (end of medium) 媒介结束 0001 1010 032 26 0x1A SUB (substitute) 代替 0001 1011 033 27 0x1B ESC (escape) 换码(溢出) 0001 1100 034 28 0x1C FS (file separator) 文件分隔符 0001 1101 035 29 0x1D GS (group separator) 分组符 0001 1110 036 30 0x1E RS (record separator) 记录分隔符 0001 1111 037 31 0x1F US (unit separator) 单元分隔符 0010 0000 040 32 0x20 (space) 空格 0010 0001 041 33 0x21 ! 叹号 0010 0010 042 34 0x22 “ 双引号 0010 0011 043 35 0x23 # 井号 0010 0100 044 36 0x24 $ 美元符 0010 0101 045 37 0x25 % 百分号 0010 0110 046 38 0x26 &amp; 和号 0010 0111 047 39 0x27 ‘ 闭单引号 0010 1000 050 40 0x28 ( 开括号 0010 1001 051 41 0x29 ) 闭括号 0010 1010 052 42 0x2A * 星号 0010 1011 053 43 0x2B + 加号 0010 1100 054 44 0x2C , 逗号 0010 1101 055 45 0x2D - 减号/破折号 0010 1110 056 46 0x2E . 句号 0010 1111 057 47 0x2F / 斜杠 0011 0000 060 48 0x30 0 字符0 0011 0001 061 49 0x31 1 字符1 0011 0010 062 50 0x32 2 字符2 0011 0011 063 51 0x33 3 字符3 0011 0100 064 52 0x34 4 字符4 0011 0101 065 53 0x35 5 字符5 0011 0110 066 54 0x36 6 字符6 0011 0111 067 55 0x37 7 字符7 0011 1000 070 56 0x38 8 字符8 0011 1001 071 57 0x39 9 字符9 0011 1010 072 58 0x3A : 冒号 0011 1011 073 59 0x3B ; 分号 0011 1100 074 60 0x3C &lt; 小于 0011 1101 075 61 0x3D = 等号 0011 1110 076 62 0x3E &gt; 大于 0011 1111 077 63 0x3F ? 问号 0100 0000 0100 64 0x40 @ 电子邮件符号 0100 0001 0101 65 0x41 A 大写字母A 0100 0010 0102 66 0x42 B 大写字母B 0100 0011 0103 67 0x43 C 大写字母C 0100 0100 0104 68 0x44 D 大写字母D 0100 0101 0105 69 0x45 E 大写字母E 0100 0110 0106 70 0x46 F 大写字母F 0100 0111 0107 71 0x47 G 大写字母G 0100 1000 0110 72 0x48 H 大写字母H 0100 1001 0111 73 0x49 I 大写字母I 01001010 0112 74 0x4A J 大写字母J 0100 1011 0113 75 0x4B K 大写字母K 0100 1100 0114 76 0x4C L 大写字母L 0100 1101 0115 77 0x4D M 大写字母M 0100 1110 0116 78 0x4E N 大写字母N 0100 1111 0117 79 0x4F O 大写字母O 0101 0000 0120 80 0x50 P 大写字母P 0101 0001 0121 81 0x51 Q 大写字母Q 0101 0010 0122 82 0x52 R 大写字母R 0101 0011 0123 83 0x53 S 大写字母S 0101 0100 0124 84 0x54 T 大写字母T 0101 0101 0125 85 0x55 U 大写字母U 0101 0110 0126 86 0x56 V 大写字母V 0101 0111 0127 87 0x57 W 大写字母W 0101 1000 0130 88 0x58 X 大写字母X 0101 1001 0131 89 0x59 Y 大写字母Y 0101 1010 0132 90 0x5A Z 大写字母Z 0101 1011 0133 91 0x5B [ 开方括号 0101 1100 0134 92 0x5C \\ 反斜杠 0101 1101 0135 93 0x5D ] 闭方括号 0101 1110 0136 94 0x5E ^ 脱字符 0101 1111 0137 95 0x5F _ 下划线 0110 0000 0140 96 0x60 ` 开单引号 0110 0001 0141 97 0x61 a 小写字母a 0110 0010 0142 98 0x62 b 小写字母b 0110 0011 0143 99 0x63 c 小写字母c 0110 0100 0144 100 0x64 d 小写字母d 0110 0101 0145 101 0x65 e 小写字母e 0110 0110 0146 102 0x66 f 小写字母f 0110 0111 0147 103 0x67 g 小写字母g 0110 1000 0150 104 0x68 h 小写字母h 0110 1001 0151 105 0x69 i 小写字母i 0110 1010 0152 106 0x6A j 小写字母j 0110 1011 0153 107 0x6B k 小写字母k 0110 1100 0154 108 0x6C l 小写字母l 0110 1101 0155 109 0x6D m 小写字母m 0110 1110 0156 110 0x6E n 小写字母n 0110 1111 0157 111 0x6F o 小写字母o 0111 0000 0160 112 0x70 p 小写字母p 0111 0001 0161 113 0x71 q 小写字母q 0111 0010 0162 114 0x72 r 小写字母r 0111 0011 0163 115 0x73 s 小写字母s 0111 0100 0164 116 0x74 t 小写字母t 0111 0101 0165 117 0x75 u 小写字母u 0111 0110 0166 118 0x76 v 小写字母v 0111 0111 0167 119 0x77 w 小写字母w 0111 1000 0170 120 0x78 x 小写字母x 0111 1001 0171 121 0x79 y 小写字母y 0111 1010 0172 122 0x7A z 小写字母z 0111 1011 0173 123 0x7B { 开花括号 0111 1100 0174 124 0x7C | 垂线 0111 1101 0175 125 0x7D } 闭花括号 0111 1110 0176 126 0x7E ~ 波浪号 0111 1111 0177 127 0x7F DEL (delete) 删除 2.扩展ASCII码在英语中，用128个符号编码便可以表示所有，但是用来表示其他语言，128个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用 ASCII 码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的é的编码为130（二进制10000010）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号 [5] 。 但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。比如，130在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0–127表示的符号是一样的，不一样的只是128–255的这一段 [5] 。 至于亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是 GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示 256 x 256 = 65536 个符号 [5] 。 3.GB2312-80编码《信息交换用汉字编码字符集》是由中国国家标准总局1980年发布，1981年5月1日开始实施的一套国家标准，标准号是[GB 2312](https://baike.baidu.com/item/GB 2312)—1980。 GB2312编码适用于汉字处理、汉字通信等系统之间的信息交换，通行于中国大陆；新加坡等地也采用此编码。中国大陆几乎所有的中文系统和国际化的软件都支持GB 2312。 基本集共收入汉字6763个和非汉字图形字符682个。整个字符集分成94个区，每区有94个位。每个区位上只有一个字符，因此可用所在的区和位来对汉字进行编码，称为区位码。 GB 2312标准共收录6763个汉字，其中一级汉字3755个，二级汉字3008个；同时，GB 2312收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的682个全角字符。 GB 2312的出现，基本满足了汉字的计算机处理需要，它所收录的汉字已经覆盖中国大陆99.75%的使用频率。 对于人名、古汉语等方面出现的罕用字，GB 2312不能处理，这导致了后来GBK及GB 18030汉字字符集的出现。 4.GBK编码GBK全称《汉字内码扩展规范》（GBK即“国标”、“扩展”汉语拼音的第一个字母，英文名称：Chinese Internal Code Specification） ，中华人民共和国全国信息技术标准化技术委员会1995年12月1日制订，国家技术监督局标准化司、电子工业部科技与质量监督司1995年12月15日联合以技监标函1995 229号文件的形式，将它确定为技术规范指导性文件。 GBK编码，是在GB2312-80标准基础上的内码扩展规范，使用了双字节编码方案，其编码范围从8140至FEFE（剔除xx7F），共23940个码位，共收录了21003个汉字，完全兼容GB2312-80标准，支持国际标准ISO/IEC10646-1和国家标准GB13000-1中的全部中日韩汉字，并包含了BIG5编码中的所有汉字。GBK编码方案于1995年10月制定， 1995年12月正式发布，中文版的WIN95、WIN98、[WINDOWS NT](https://baike.baidu.com/item/WINDOWS NT)以及WINDOWS 2000、WINDOWS XP、WIN 7等都支持GBK编码方案。 5.GB18030编码国家标准GB18030-2000《信息交换用汉字编码字符集基本集的补充》是我国继GB2312-1980和GB13000-1993之后最重要的汉字编码标准，是我国计算机系统必须遵循的基础性标准之一。 GB18030-2000编码标准是由信息产业部和国家质量技术监督局在2000年 3月17日联合发布的，并且将作为一项国家标准在2001年的1月正式强制执行。 GB18030-2005《信息技术中文编码字符集》是我国制订的以汉字为主并包含多种我国少数民族文字（如藏、蒙古、傣、彝、朝鲜、维吾尔文等）的超大型中文编码字符集强制性标准，其中收入汉字70000余个。 6.Unicode编码统一码，也叫万国码、单一码（Unicode）是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。1990年开始研发，1994年正式发布1.0版本，2020年发布13.0版本。 Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。Unicode用数字0-0x10FFFF来映射这些字符，最多可以容纳1114112个字符，或者说有1114112个码位。码位就是可以分配给字符的数字。UTF-8、UTF-16、UTF-32都是将数字转换到程序数据的编码方案。 7.UTF-8编码UTF-8（8位元，Universal Character Set/Unicode Transformation Format）是针对Unicode的一种可变长度字符编码。它可以用来表示Unicode标准中的任何字符，而且其编码中的第一个字节仍与ASCII相容，使得原来处理ASCII字符的软件无须或只进行少部分修改后，便可继续使用。因此，它逐渐成为电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。 Unicode只是一组字符设定或者说是从数字和字符之间的逻辑映射的概念编码，但是它并没有指定代码点如何在计算机上存储。UCS4、UTF-8、UTF-16（UTF后的数字代表编码的最小单位，如UTF-8表示最小单位1字节（=8 bits）,所以它可以使用1、2、3字节等进行编码，UTF-16表示最小单位2字节，所以它可以使用2、4字节进行编码）都是Unicode的编码方案。其中UTF-8因可以兼容ASCII而被广泛使用。","categories":[{"name":"常用易忘内容","slug":"常用易忘内容","permalink":"http://1530624156.github.io/categories/%E5%B8%B8%E7%94%A8%E6%98%93%E5%BF%98%E5%86%85%E5%AE%B9/"}],"tags":[{"name":"编码","slug":"编码","permalink":"http://1530624156.github.io/tags/%E7%BC%96%E7%A0%81/"}]},{"title":"关于自建博客的报告","slug":"关于自建博客的报告","date":"2021-08-05T04:59:53.000Z","updated":"2021-08-05T05:53:17.514Z","comments":true,"path":"2021/08/05/关于自建博客的报告/","link":"","permalink":"http://1530624156.github.io/2021/08/05/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%8A%A5%E5%91%8A/","excerpt":"","text":"关于自建博客的概述 一、着手准备​ 这个博客我从2021.08.02下午六点还是动手搭建，刚开始我的想法是在Gitee找个大佬的PHP手撕博客上传到自己的服务器，找了很多不是不会用就是文件很大，都知道上传FTP的速度不是很快。再加上要配置什么数据库啥啥啥静态public啥啥啥的也比较麻烦，所以我干脆放弃，寻找了其他方法，后来发现了hexo这个玩意儿，基于node.js的玩意儿，就开始去琢磨琢磨。 二、准备过程​ 查阅了大量资料和视频之后得知hexo是基于hexo的，所以去官网下载了node.js，因为在不是在工作室，而是放假的时候在家里搭建的，家里电脑的操作系统是win7的，最新版的只支持win8及更高，所以又去找老版[其实版本新或老无影响，只是当时折腾了一会儿=W=]. ​ 如果大家也想搭建的话在这里给大家推荐程序羊的视频，讲解得很仔细，很有条理，玩意最后还是不会可以联系我，顶部关于我里面有我的个人信息。 ​ 视频地址: https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=12214169833465401234 ​ 操作步骤基本就是： 123456789 1.现在node.js并安装​ 2.安装cnpm淘宝云镜像(具体原因我就不说了，视频里有)​ 3.安装hexo.​ 4.配置hexo​ 5.部署至github 三、个人心得​ 其实很多事情看起来很复杂，刚开始做的时候很多都不懂，照葫芦画瓢都画不出来，但是只要坚持下去，不停地查阅资料，总会完成的。 ​ 就像这次搭建博客，当时看了不下于十篇文章，五个视频，依然不会，后来慢慢琢磨琢磨就搞成功了。 四、结尾​ 好了，本章文章就到此结束了，希望大家也能成功搭建好自己的博客。","categories":[{"name":"文章","slug":"文章","permalink":"http://1530624156.github.io/categories/%E6%96%87%E7%AB%A0/"}],"tags":[{"name":"博客来源","slug":"博客来源","permalink":"http://1530624156.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%9D%A5%E6%BA%90/"}]},{"title":"一篇关于博客的自述","slug":"你好-世界","date":"2021-08-04T10:03:14.000Z","updated":"2021-08-05T05:53:25.831Z","comments":true,"path":"2021/08/04/你好-世界/","link":"","permalink":"http://1530624156.github.io/2021/08/04/%E4%BD%A0%E5%A5%BD-%E4%B8%96%E7%95%8C/","excerpt":"","text":"一篇关于博客的自述你好 世界​ 你好 世界，作为本世纪的博客我想我应该做点什么 ​ 先来个自我介绍，大家好，我是一名JAVA开发的程序员，这是我人生第一次写博客，之前也曾听说过写博客是程序员最好的成长方式之一，因为各种原因或者说是惰性思想而没有开始，今晚是项目上线的时间，在等待测试验证的时间突然萌生了写博客的想法，那就开始吧。 ​ 第一篇呢，就先分享一下自己当程序员的感受吧。就个人而言，我觉得程序员是一个特别需要被认可的行业，希望自己被别人认可，也希望自己的代码被别人认可。每当自己一个字母一个字母亲手敲打出来的代码，实现了某个新的业务功能的时候，当自己的代码实现了功能，又很少出bug或者没有bug的时候，心里总是带有一种成就感和喜悦感的！尤其是自己用了新的思路或者新的办法解决问题的时候，恨不得告诉全世界自己的成长，但是呢，又怕别人说自己太过浮夸，就自己分享这份喜悦吧。所以有人说，程序员是孤独的，嗯，确实是这样。 ​ 同时，程序员也是焦虑的，迷茫的。会为了学不到东西，害怕没办法成长而焦虑；又会为了学什么技术，从什么入手而迷茫，如：不知道该先学jvm，还是先学多线程，或者先学设计模式和算法。既然没有人指路，那就自己闯闯呗。学一学自己感兴趣的，或者经常用到的，或者面试经常问到的。 ​ 于是，年前买了一门多线程的课，看了几章觉得受益匪浅，越看越起劲，然后过年放假，又因为去年可恶的新冠状病毒而导致的假期延长。已经玩了很久，也放松了很久了。直到上上周新加入一个项目组，开始了一些开发工作，思想才慢慢的被拉回正轨，意识到自己很久没有学习了，发现自己年前看过的知识点已经忘记的七七八八了。写这篇博客的一个目的也是为了促进一下自己的学习，也想试一下写博客，是否真的能让我学到的东西记得更深一些 ​ 我也会在博客发表一些关于自己的学习心得，供大家参考，希望大家都能变成自己所目标上的人物，不管是前端也好，后端也罢，总有一款你喜欢的。 ​ 大家可以一起学习，一起进步","categories":[{"name":"文章","slug":"文章","permalink":"http://1530624156.github.io/categories/%E6%96%87%E7%AB%A0/"}],"tags":[{"name":"博客自述","slug":"博客自述","permalink":"http://1530624156.github.io/tags/%E5%8D%9A%E5%AE%A2%E8%87%AA%E8%BF%B0/"}]}],"categories":[{"name":"前端","slug":"前端","permalink":"http://1530624156.github.io/categories/%E5%89%8D%E7%AB%AF/"},{"name":"常用易忘内容","slug":"常用易忘内容","permalink":"http://1530624156.github.io/categories/%E5%B8%B8%E7%94%A8%E6%98%93%E5%BF%98%E5%86%85%E5%AE%B9/"},{"name":"文章","slug":"文章","permalink":"http://1530624156.github.io/categories/%E6%96%87%E7%AB%A0/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://1530624156.github.io/tags/JavaScript/"},{"name":"CSS","slug":"CSS","permalink":"http://1530624156.github.io/tags/CSS/"},{"name":"HTML","slug":"HTML","permalink":"http://1530624156.github.io/tags/HTML/"},{"name":"编码","slug":"编码","permalink":"http://1530624156.github.io/tags/%E7%BC%96%E7%A0%81/"},{"name":"博客来源","slug":"博客来源","permalink":"http://1530624156.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%9D%A5%E6%BA%90/"},{"name":"博客自述","slug":"博客自述","permalink":"http://1530624156.github.io/tags/%E5%8D%9A%E5%AE%A2%E8%87%AA%E8%BF%B0/"}]}